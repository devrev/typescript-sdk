{
  "components": {
    "responses": {
      "bad-request": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error-bad-request"
            }
          }
        },
        "description": "400 Bad Request."
      },
      "conflict": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error-conflict"
            }
          }
        },
        "description": "409 Conflict."
      },
      "forbidden": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error-forbidden"
            }
          }
        },
        "description": "403 Forbidden."
      },
      "internal-server-error": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error-internal-server-error"
            }
          }
        },
        "description": "500 Internal Server Error."
      },
      "not-found": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error-not-found"
            }
          }
        },
        "description": "404 Not Found."
      },
      "service-unavailable": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error-service-unavailable"
            }
          }
        },
        "description": "503 Service Unavailable."
      },
      "too-many-requests": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error-too-many-requests"
            }
          }
        },
        "description": "429 Too Many Requests.",
        "headers": {
          "Retry-After": {
            "schema": {
              "type": "number",
              "description": "Number of seconds to wait before retrying."
            }
          }
        }
      },
      "unauthorized": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error-unauthorized"
            }
          }
        },
        "description": "401 Unauthorized."
      }
    },
    "schemas": {
      "account": {
        "allOf": [
          {
            "$ref": "#/components/schemas/org-base"
          },
          {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "Description of the corresponding Account."
              },
              "domains": {
                "type": "array",
                "description": "Company's domain names. Example - 'devrev.ai'.",
                "items": {
                  "type": "string"
                }
              },
              "external_refs": {
                "type": "array",
                "description": "External refs are unique identifiers from your customer system of\nrecords, stored as a list.\n",
                "items": {
                  "type": "string"
                }
              },
              "owned_by": {
                "type": "array",
                "description": "List of Dev user IDs owning this Account.",
                "items": {
                  "$ref": "#/components/schemas/user-summary"
                }
              },
              "tier": {
                "type": "string",
                "description": "The Tier of the corresponding Account."
              }
            },
            "required": [
              "external_refs",
              "owned_by"
            ]
          }
        ],
        "title": "account"
      },
      "accounts-create-request": {
        "type": "object",
        "description": "Request object to create a new account in the Dev organization.\n",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the account."
          },
          "display_name": {
            "type": "string",
            "description": "Name of the account."
          },
          "domains": {
            "type": "array",
            "description": "List of company's domain names. Example - ['devrev.ai'].",
            "items": {
              "type": "string"
            }
          },
          "external_refs": {
            "type": "array",
            "description": "External refs are unique identifiers from your customer system of\nrecords, stored as a list.\n",
            "items": {
              "type": "string"
            }
          },
          "owned_by": {
            "type": "array",
            "description": "List of Dev users owning this account.",
            "items": {
              "type": "string"
            }
          },
          "tier": {
            "type": "string",
            "description": "The tier of the account."
          },
          "websites": {
            "type": "array",
            "description": "List of company websites. Example - ['www.devrev.ai',\n'www.marketplace.devrev.ai'].\n",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "display_name"
        ],
        "title": "accounts-create-request"
      },
      "accounts-create-response": {
        "type": "object",
        "description": "The response to creating a new account.",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/account"
          }
        },
        "required": [
          "account"
        ],
        "title": "accounts-create-response",
        "x-go-name": "AccountsCreateResponseBody"
      },
      "accounts-delete-request": {
        "type": "object",
        "description": "Request object to delete an account.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of account to delete.",
            "example": "ACC-12345"
          }
        },
        "required": [
          "id"
        ],
        "title": "accounts-delete-request"
      },
      "accounts-delete-response": {
        "type": "object",
        "additionalProperties": false,
        "description": "The response to deleting an account.",
        "title": "accounts-delete-response",
        "x-go-name": "AccountsDeleteResponseBody"
      },
      "accounts-export-request": {
        "type": "object",
        "description": "The request to export a collection of accounts.",
        "properties": {
          "created_by": {
            "type": "array",
            "description": "Filters for accounts created by the specified user(s).",
            "items": {
              "type": "string"
            }
          },
          "created_date": {
            "$ref": "#/components/schemas/date-time-filter"
          },
          "display_name": {
            "type": "array",
            "description": "Array of display names of accounts to be filtered.",
            "items": {
              "type": "string"
            }
          },
          "external_refs": {
            "type": "array",
            "description": "Array of references of accounts to be filtered.",
            "items": {
              "type": "string"
            }
          },
          "first": {
            "type": "integer",
            "description": "The number of accounts to return. The default is '50'.",
            "format": "int32",
            "maximum": 500,
            "minimum": 1
          },
          "modified_date": {
            "$ref": "#/components/schemas/date-time-filter"
          },
          "sort_by": {
            "type": "array",
            "description": "Fields to sort the accounts by and the direction to sort them in.\n",
            "items": {
              "type": "string"
            }
          },
          "stage": {
            "type": "array",
            "description": "Filters for accounts on specified stages.",
            "items": {
              "type": "string"
            }
          }
        },
        "title": "accounts-export-request"
      },
      "accounts-export-response": {
        "type": "object",
        "description": "The response to exporting a collection of accounts.",
        "properties": {
          "accounts": {
            "type": "array",
            "description": "The exported accounts.",
            "items": {
              "$ref": "#/components/schemas/account"
            }
          }
        },
        "required": [
          "accounts"
        ],
        "title": "accounts-export-response",
        "x-go-name": "AccountsExportResponseBody"
      },
      "accounts-get-request": {
        "type": "object",
        "description": "Request object to get an account's information.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the account to be retrieved.",
            "example": "ACC-12345"
          }
        },
        "required": [
          "id"
        ],
        "title": "accounts-get-request"
      },
      "accounts-get-response": {
        "type": "object",
        "description": "The returned account.",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/account"
          }
        },
        "required": [
          "account"
        ],
        "title": "accounts-get-response",
        "x-go-name": "AccountsGetResponseBody"
      },
      "accounts-list-request": {
        "type": "object",
        "description": "List the accounts.",
        "properties": {
          "created_by": {
            "type": "array",
            "description": "Filters for accounts created by the specified user(s).",
            "items": {
              "type": "string"
            }
          },
          "created_date": {
            "$ref": "#/components/schemas/date-time-filter"
          },
          "cursor": {
            "type": "string",
            "description": "The cursor to resume iteration from. If not provided, then\niteration starts from the beginning.\n"
          },
          "display_name": {
            "type": "array",
            "description": "Array of display names of accounts to be filtered.",
            "items": {
              "type": "string"
            }
          },
          "external_refs": {
            "type": "array",
            "description": "Array of references of accounts to be filtered.",
            "items": {
              "type": "string"
            }
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of accounts to return per page. The default is\n'50'.\n",
            "format": "int32"
          },
          "mode": {
            "$ref": "#/components/schemas/list-mode"
          },
          "modified_date": {
            "$ref": "#/components/schemas/date-time-filter"
          },
          "sort_by": {
            "type": "array",
            "description": "Fields to sort the accounts by and the direction to sort them in.\n",
            "items": {
              "type": "string"
            }
          },
          "stage": {
            "type": "array",
            "description": "Filters for accounts on specified stages.",
            "items": {
              "type": "string"
            }
          }
        },
        "title": "accounts-list-request"
      },
      "accounts-list-response": {
        "type": "object",
        "description": "The response to listing all accounts matching the filter criteria.\n",
        "properties": {
          "accounts": {
            "type": "array",
            "description": "List containing all the accounts",
            "items": {
              "$ref": "#/components/schemas/account"
            }
          },
          "next_cursor": {
            "type": "string",
            "description": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n"
          },
          "prev_cursor": {
            "type": "string",
            "description": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n"
          }
        },
        "required": [
          "accounts"
        ],
        "title": "accounts-list-response",
        "x-go-name": "AccountsListResponseBody"
      },
      "accounts-update-request": {
        "type": "object",
        "description": "Request to update details of the account.",
        "properties": {
          "description": {
            "type": "string",
            "description": "Updated description of the account."
          },
          "display_name": {
            "type": "string",
            "description": "Updated display name for the account."
          },
          "domains": {
            "type": "array",
            "description": "Updated list of company's domain names. Example - ['devrev.ai'].\n",
            "items": {
              "type": "string"
            }
          },
          "external_refs": {
            "type": "array",
            "description": "Updated External Refs of account.",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "description": "The ID of account to update.",
            "example": "ACC-12345"
          },
          "owned_by": {
            "type": "array",
            "description": "Updated list of the users owning this account.",
            "items": {
              "type": "string"
            }
          },
          "tier": {
            "type": "string",
            "description": "Updated tier of the account.",
            "nullable": true
          }
        },
        "required": [
          "id"
        ],
        "title": "accounts-update-request"
      },
      "accounts-update-response": {
        "type": "object",
        "description": "Updated account object.",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/account"
          }
        },
        "required": [
          "account"
        ],
        "title": "accounts-update-response",
        "x-go-name": "AccountsUpdateResponseBody"
      },
      "archetype-metric-target": {
        "type": "object",
        "description": "Metric with corresponding target values.",
        "properties": {
          "is_out_of_schedule": {
            "type": "boolean",
            "description": "If true, the schedule attached to this metric is out of schedule at\nthe time of the query.\n"
          },
          "metric_definition": {
            "$ref": "#/components/schemas/metric-definition-summary"
          },
          "org_schedule": {
            "$ref": "#/components/schemas/org-schedule-summary"
          },
          "remaining_time": {
            "type": "integer",
            "description": "Time in minutes that remains on a paused metric.",
            "format": "int32"
          },
          "target_time": {
            "type": "string",
            "description": "Time at which the metric would breach SLA if no action taken.\n",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time"
          },
          "warning_target_time": {
            "type": "string",
            "description": "Time at which the metric would reach the SLA warning limit if no\naction taken.\n",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time"
          }
        },
        "required": [
          "metric_definition"
        ],
        "title": "archetype-metric-target"
      },
      "artifact": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base"
          }
        ],
        "title": "artifact"
      },
      "artifact-summary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base-summary"
          }
        ],
        "title": "artifact-summary"
      },
      "artifact-version": {
        "type": "object",
        "description": "The version of the artifact.",
        "properties": {
          "modified_by": {
            "$ref": "#/components/schemas/user-summary"
          },
          "timestamp": {
            "type": "string",
            "description": "The timestamp at which the version was created.",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time"
          },
          "version": {
            "type": "string",
            "description": "The version of the artifact."
          }
        },
        "required": [
          "timestamp",
          "version"
        ],
        "title": "artifact-version"
      },
      "artifacts-get-request": {
        "type": "object",
        "description": "The request to get an artifact's information.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The requested artifact's ID.",
            "example": "ARTIFACT-12345"
          },
          "version": {
            "type": "string",
            "description": "The version of the artifact that needs to be fetched."
          }
        },
        "required": [
          "id"
        ],
        "title": "artifacts-get-request"
      },
      "artifacts-get-response": {
        "type": "object",
        "description": "The response to getting an artifact's information.",
        "properties": {
          "artifact": {
            "$ref": "#/components/schemas/artifact"
          },
          "version": {
            "$ref": "#/components/schemas/artifact-version"
          }
        },
        "required": [
          "artifact",
          "version"
        ],
        "title": "artifacts-get-response",
        "x-go-name": "ArtifactsGetResponseBody"
      },
      "artifacts-list-request": {
        "type": "object",
        "description": "The request to list artifacts attached to an object.",
        "properties": {
          "parent_id": {
            "type": "string",
            "description": "The ID of the object to filter artifacts."
          }
        },
        "title": "artifacts-list-request"
      },
      "artifacts-list-response": {
        "type": "object",
        "description": "The response to list artifacts attached to an object.",
        "properties": {
          "artifacts": {
            "type": "array",
            "description": "The artifact's information.",
            "items": {
              "$ref": "#/components/schemas/artifact"
            }
          }
        },
        "required": [
          "artifacts"
        ],
        "title": "artifacts-list-response",
        "x-go-name": "ArtifactsListResponseBody"
      },
      "artifacts-locate-request": {
        "type": "object",
        "description": "The request to get an artifact's download URL.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the artifact to get the URL for.",
            "example": "ARTIFACT-12345"
          },
          "version": {
            "type": "string",
            "description": "The version of the artifact that needs to be fetched."
          }
        },
        "required": [
          "id"
        ],
        "title": "artifacts-locate-request"
      },
      "artifacts-locate-response": {
        "type": "object",
        "description": "The response to getting an artifact's download URL.",
        "properties": {
          "expires_at": {
            "type": "string",
            "description": "The expiration timestamp of the URL.",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time"
          },
          "url": {
            "type": "string",
            "description": "The artifact's download URL."
          }
        },
        "required": [
          "url"
        ],
        "title": "artifacts-locate-response",
        "x-go-name": "ArtifactsLocateResponseBody"
      },
      "artifacts-prepare-request": {
        "type": "object",
        "description": "The request to prepare a URL to upload a file.",
        "properties": {
          "file_name": {
            "type": "string",
            "description": "The name of the file that's being uploaded."
          },
          "file_type": {
            "type": "string",
            "description": "The type of file that's being uploaded."
          }
        },
        "required": [
          "file_name"
        ],
        "title": "artifacts-prepare-request"
      },
      "artifacts-prepare-response": {
        "type": "object",
        "description": "The response to preparing a URL to upload a file.",
        "properties": {
          "form_data": {
            "type": "array",
            "description": "The POST policy form data.",
            "items": {
              "$ref": "#/components/schemas/artifacts-prepare-response-form-data"
            }
          },
          "id": {
            "type": "string",
            "description": "The generated artifact's ID.",
            "example": "ARTIFACT-12345"
          },
          "url": {
            "type": "string",
            "description": "The URL that the file's data should be uploaded to."
          }
        },
        "required": [
          "form_data",
          "id",
          "url"
        ],
        "title": "artifacts-prepare-response",
        "x-go-name": "ArtifactsPrepareResponseBody"
      },
      "artifacts-prepare-response-form-data": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key of the form field."
          },
          "value": {
            "type": "string",
            "description": "Value corresponding to the key."
          }
        },
        "required": [
          "key",
          "value"
        ],
        "title": "artifacts-prepare-response-form-data"
      },
      "atom-base": {
        "type": "object",
        "properties": {
          "created_by": {
            "$ref": "#/components/schemas/user-summary"
          },
          "created_date": {
            "type": "string",
            "description": "Timestamp when the object was created.",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time"
          },
          "display_id": {
            "type": "string",
            "description": "Human-readable object ID unique to the Dev organization."
          },
          "id": {
            "type": "string",
            "description": "Globally unique object ID."
          },
          "modified_by": {
            "$ref": "#/components/schemas/user-summary"
          },
          "modified_date": {
            "type": "string",
            "description": "Timestamp when the object was last modified.",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time"
          }
        },
        "required": [
          "id"
        ],
        "title": "atom-base"
      },
      "atom-base-summary": {
        "type": "object",
        "properties": {
          "display_id": {
            "type": "string",
            "description": "Human-readable object ID unique to the Dev organization."
          },
          "id": {
            "type": "string",
            "description": "Globally unique object ID."
          }
        },
        "required": [
          "id"
        ],
        "title": "atom-base-summary"
      },
      "auth-connection": {
        "type": "object",
        "description": "Connection object that specifies the configuration for an\nauthentication connection that is set up for a Dev organization.\n",
        "discriminator": {
          "mapping": {
            "google_apps": "#/components/schemas/auth-connection-options-google-apps",
            "oidc": "#/components/schemas/auth-connection-options-oidc",
            "samlp": "#/components/schemas/auth-connection-options-saml",
            "social": "#/components/schemas/auth-connection-options-social",
            "waad": "#/components/schemas/auth-connection-options-azure-ad"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/auth-connection-options-azure-ad"
          },
          {
            "$ref": "#/components/schemas/auth-connection-options-google-apps"
          },
          {
            "$ref": "#/components/schemas/auth-connection-options-oidc"
          },
          {
            "$ref": "#/components/schemas/auth-connection-options-saml"
          },
          {
            "$ref": "#/components/schemas/auth-connection-options-social"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/auth-connection-type"
          },
          "display_name": {
            "type": "string",
            "description": "Display name of the authentication connection. This name will be\nvisible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the authentication connection is enabled or disabled. If\nset to false, the authentication connection will not show up on the\nlogin screen as a login option.\n"
          },
          "id": {
            "type": "string",
            "description": "ID of the authentication connection."
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "auth-connection"
      },
      "auth-connection-options-azure-ad": {
        "type": "object",
        "description": "Object encapsulating the configuration parameters for an Azure AD\nauthentication connection.\n",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "Client ID for the Azure authentication connection."
          },
          "client_secret": {
            "type": "string",
            "description": "Client secret for the Azure authentication connection."
          },
          "domain": {
            "type": "string",
            "description": "Domain URL of the Azure authentication connection."
          }
        },
        "title": "auth-connection-options-azure-ad"
      },
      "auth-connection-options-google-apps": {
        "type": "object",
        "description": "Object encapsulating the configuration parameters for a Google Apps\nauthentication connection.\n",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "Client ID for the Google Apps authentication connection."
          },
          "client_secret": {
            "type": "string",
            "description": "Client secret for the Google Apps authentication connection.\n"
          },
          "tenant_domain": {
            "type": "string",
            "description": "Tenant domain URL of the Google Apps authentication connection.\n"
          }
        },
        "title": "auth-connection-options-google-apps"
      },
      "auth-connection-options-oidc": {
        "type": "object",
        "description": "Object encapsulating the configuration parameters for an OIDC\nauthentication connection.\n",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "Client ID for the OIDC authentication connection."
          },
          "client_secret": {
            "type": "string",
            "description": "Client secret for the OIDC authentication connection."
          },
          "issuer": {
            "type": "string",
            "description": "Issuer URL of the OIDC authentication connection."
          }
        },
        "title": "auth-connection-options-oidc"
      },
      "auth-connection-options-saml": {
        "type": "object",
        "description": "Object encapsulating the configuration parameters for a SAML\nauthentication connection.\n",
        "properties": {
          "sign_in_endpoint": {
            "type": "string",
            "description": "Sign In endpoint for the SAML authentication connection."
          },
          "signing_cert": {
            "type": "string",
            "description": "Signing certificate for the SAML authentication connection.\n"
          }
        },
        "title": "auth-connection-options-saml"
      },
      "auth-connection-options-social": {
        "type": "object",
        "additionalProperties": false,
        "title": "auth-connection-options-social"
      },
      "auth-connection-toggle": {
        "type": "string",
        "enum": [
          "disable",
          "enable"
        ]
      },
      "auth-connection-type": {
        "type": "string",
        "description": "Defines the type for the authentication connection. The configuration\nfor each authentication connection will depend on the type value.\n",
        "enum": [
          "google_apps",
          "oidc",
          "samlp",
          "social",
          "waad"
        ]
      },
      "auth-token": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base"
          },
          {
            "type": "object",
            "properties": {
              "client_id": {
                "type": "string",
                "description": "An identifier that represents the application that requested the\ntoken. Only applicable for application access tokens.\n"
              },
              "expires_at": {
                "type": "string",
                "description": "The time at which the token expires.",
                "example": "2023-01-01T12:00:00.000Z",
                "format": "date-time"
              },
              "issued_at": {
                "type": "string",
                "description": "The time at which the token was issued.",
                "example": "2023-01-01T12:00:00.000Z",
                "format": "date-time"
              },
              "requested_token_type": {
                "$ref": "#/components/schemas/auth-token-requested-token-type"
              },
              "scopes": {
                "type": "array",
                "description": "The scopes associated with the issued token.",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "$ref": "#/components/schemas/auth-token-status"
              },
              "subject": {
                "type": "string",
                "description": "The subject of the token."
              },
              "token_hint": {
                "type": "string",
                "description": "A hint that identifies the token."
              }
            }
          }
        ],
        "title": "auth-token"
      },
      "auth-token-grant-type": {
        "type": "string",
        "description": "Specifies the process of obtaining a token.",
        "enum": [
          "urn:devrev:params:oauth:grant-type:token-issue",
          "urn:ietf:params:oauth:grant-type:token-exchange"
        ],
        "x-fern-enum": {
          "urn:devrev:params:oauth:grant-type:token-issue": {
            "name": "urn-devrev-params-oauth-grant-type-token-issue"
          },
          "urn:ietf:params:oauth:grant-type:token-exchange": {
            "name": "urn-ietf-params-oauth-grant-type-token-exchange"
          }
        }
      },
      "auth-token-requested-token-type": {
        "type": "string",
        "description": "The type of the requested token.",
        "enum": [
          "urn:devrev:params:oauth:token-type:aat",
          "urn:devrev:params:oauth:token-type:aat:act-as",
          "urn:devrev:params:oauth:token-type:aat:public",
          "urn:devrev:params:oauth:token-type:dev",
          "urn:devrev:params:oauth:token-type:dev:connect",
          "urn:devrev:params:oauth:token-type:gat",
          "urn:devrev:params:oauth:token-type:pat",
          "urn:devrev:params:oauth:token-type:pat:act-as",
          "urn:devrev:params:oauth:token-type:rat",
          "urn:devrev:params:oauth:token-type:rev",
          "urn:devrev:params:oauth:token-type:session",
          "urn:devrev:params:oauth:token-type:session:dev0",
          "urn:devrev:params:oauth:token-type:session:onetime",
          "urn:devrev:params:oauth:token-type:session:rev:act-as",
          "urn:devrev:params:oauth:token-type:super",
          "urn:devrev:params:oauth:token-type:sys",
          "urn:ietf:params:oauth:token-type:jwt"
        ],
        "x-fern-enum": {
          "urn:devrev:params:oauth:token-type:aat": {
            "name": "urn-devrev-params-oauth-token-type-aat"
          },
          "urn:devrev:params:oauth:token-type:aat:act-as": {
            "name": "urn-devrev-params-oauth-token-type-aat-act-as"
          },
          "urn:devrev:params:oauth:token-type:aat:public": {
            "name": "urn-devrev-params-oauth-token-type-aat-public"
          },
          "urn:devrev:params:oauth:token-type:dev": {
            "name": "urn-devrev-params-oauth-token-type-dev"
          },
          "urn:devrev:params:oauth:token-type:dev:connect": {
            "name": "urn-devrev-params-oauth-token-type-dev-connect"
          },
          "urn:devrev:params:oauth:token-type:gat": {
            "name": "urn-devrev-params-oauth-token-type-gat"
          },
          "urn:devrev:params:oauth:token-type:pat": {
            "name": "urn-devrev-params-oauth-token-type-pat"
          },
          "urn:devrev:params:oauth:token-type:pat:act-as": {
            "name": "urn-devrev-params-oauth-token-type-pat-act-as"
          },
          "urn:devrev:params:oauth:token-type:rat": {
            "name": "urn-devrev-params-oauth-token-type-rat"
          },
          "urn:devrev:params:oauth:token-type:rev": {
            "name": "urn-devrev-params-oauth-token-type-rev"
          },
          "urn:devrev:params:oauth:token-type:session": {
            "name": "urn-devrev-params-oauth-token-type-session"
          },
          "urn:devrev:params:oauth:token-type:session:dev0": {
            "name": "urn-devrev-params-oauth-token-type-session-dev0"
          },
          "urn:devrev:params:oauth:token-type:session:onetime": {
            "name": "urn-devrev-params-oauth-token-type-session-onetime"
          },
          "urn:devrev:params:oauth:token-type:session:rev:act-as": {
            "name": "urn-devrev-params-oauth-token-type-session-rev-act-as"
          },
          "urn:devrev:params:oauth:token-type:super": {
            "name": "urn-devrev-params-oauth-token-type-super"
          },
          "urn:devrev:params:oauth:token-type:sys": {
            "name": "urn-devrev-params-oauth-token-type-sys"
          },
          "urn:ietf:params:oauth:token-type:jwt": {
            "name": "urn-ietf-params-oauth-token-type-jwt"
          }
        }
      },
      "auth-token-status": {
        "type": "string",
        "description": "The status of the token.",
        "enum": [
          "active",
          "expired",
          "revoked"
        ]
      },
      "auth-token-subject-token-type": {
        "type": "string",
        "description": "The type of the subject token.",
        "enum": [
          "urn:devrev:params:oauth:token-type:jwt:auth0",
          "urn:devrev:params:oauth:token-type:jwt:dev",
          "urn:devrev:params:oauth:token-type:rat",
          "urn:devrev:params:oauth:token-type:rev",
          "urn:devrev:params:oauth:token-type:revinfo",
          "urn:devrev:params:oauth:token-type:session",
          "urn:devrev:params:oauth:token-type:sysu",
          "urn:devrev:params:oauth:token-type:userinfo",
          "urn:ietf:params:oauth:token-type:jwt"
        ],
        "x-fern-enum": {
          "urn:devrev:params:oauth:token-type:jwt:auth0": {
            "name": "urn-devrev-params-oauth-token-type-jwt-auth0"
          },
          "urn:devrev:params:oauth:token-type:jwt:dev": {
            "name": "urn-devrev-params-oauth-token-type-jwt-dev"
          },
          "urn:devrev:params:oauth:token-type:rat": {
            "name": "urn-devrev-params-oauth-token-type-rat"
          },
          "urn:devrev:params:oauth:token-type:rev": {
            "name": "urn-devrev-params-oauth-token-type-rev"
          },
          "urn:devrev:params:oauth:token-type:revinfo": {
            "name": "urn-devrev-params-oauth-token-type-revinfo"
          },
          "urn:devrev:params:oauth:token-type:session": {
            "name": "urn-devrev-params-oauth-token-type-session"
          },
          "urn:devrev:params:oauth:token-type:sysu": {
            "name": "urn-devrev-params-oauth-token-type-sysu"
          },
          "urn:devrev:params:oauth:token-type:userinfo": {
            "name": "urn-devrev-params-oauth-token-type-userinfo"
          },
          "urn:ietf:params:oauth:token-type:jwt": {
            "name": "urn-ietf-params-oauth-token-type-jwt"
          }
        }
      },
      "auth-token-token-type": {
        "type": "string",
        "description": "The type of the issued token. Bearer is the only supported token type.\n",
        "enum": [
          "bearer"
        ]
      },
      "auth-tokens-account-traits": {
        "type": "object",
        "description": "Carries account info.",
        "properties": {
          "display_name": {
            "type": "string",
            "description": "The display name of the account."
          },
          "domains": {
            "type": "array",
            "description": "List of company's domain names on accounts. Example -\n['devrev.ai'].\n",
            "items": {
              "type": "string"
            }
          }
        },
        "title": "auth-tokens-account-traits"
      },
      "auth-tokens-create-request": {
        "type": "object",
        "description": "A request to create a new token corresponding to the requested token\ntype.\n",
        "properties": {
          "act_as": {
            "type": "string",
            "description": "The unique ID of the Dev user or the service account to\nimpersonate.\n"
          },
          "aud": {
            "type": "array",
            "description": "The expected audience values with respect to the token.",
            "items": {
              "type": "string"
            }
          },
          "client_id": {
            "type": "string",
            "description": "An identifier that represents the application which is requesting\nthe token. If no client_id is present in the request to generate an\napplication access token (AAT), DevRev will generate a client_id.\nThis client_id is only associated with an AAT.\n"
          },
          "expires_in": {
            "type": "integer",
            "description": "The expected validity lifetime of the token in number of days. In\npractice, the value should be based on the usage of the token.\n",
            "maximum": 4294967295,
            "minimum": 0
          },
          "grant_type": {
            "$ref": "#/components/schemas/auth-token-grant-type"
          },
          "requested_token_type": {
            "$ref": "#/components/schemas/auth-token-requested-token-type"
          },
          "rev_info": {
            "$ref": "#/components/schemas/auth-tokens-rev-info"
          },
          "scope": {
            "type": "string",
            "description": "The requested set of scopes associated with the issued token. A\nspace-delimited list of values in which the order of values does\nnot matter.\n"
          },
          "subject_token": {
            "type": "string",
            "description": "Represents the entity that requests the token. Not required when\nrequesting an application access token (AAT).\n"
          },
          "subject_token_type": {
            "$ref": "#/components/schemas/auth-token-subject-token-type"
          },
          "token_hint": {
            "type": "string",
            "description": "A hint that identifies the token."
          }
        },
        "title": "auth-tokens-create-request"
      },
      "auth-tokens-create-response": {
        "type": "object",
        "description": "Response for the request to create a new token corresponding to the\nrequested token type.\n",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The issued JSON Web Token (JWT) corresponding to the requested\ntoken type.\n"
          },
          "client_id": {
            "type": "string",
            "description": "An identifier that represents the application which is requesting\nthe token. Only present in a response corresponding to an\napplication access token (AAT).\n"
          },
          "expires_in": {
            "type": "integer",
            "description": "The validity lifetime of the token specified in seconds since Unix\nepoch.\n",
            "format": "int64"
          },
          "refresh_token": {
            "type": "string",
            "description": "A token to refresh the issued token."
          },
          "scope": {
            "type": "string",
            "description": "The scopes associated with the issued token. A space-delimited list\nof values in which the order of values does not matter.\n"
          },
          "token_type": {
            "$ref": "#/components/schemas/auth-token-token-type"
          }
        },
        "required": [
          "access_token",
          "expires_in",
          "token_type"
        ],
        "title": "auth-tokens-create-response",
        "x-go-name": "AuthTokensCreateResponseBody"
      },
      "auth-tokens-delete-request": {
        "type": "object",
        "description": "The request to revoke the token.",
        "properties": {
          "token_id": {
            "type": "string",
            "description": "The unique identifier for the token under a given Dev organization.\nIf no token ID is provided, then the token ID will be set from the\nJTI claim of the token in the authorization header.\n"
          }
        },
        "title": "auth-tokens-delete-request"
      },
      "auth-tokens-get-request": {
        "type": "object",
        "description": "The request to get the token metadata.",
        "properties": {
          "token_id": {
            "type": "string",
            "description": "The unique identifier of the token under a given Dev organization.\n"
          }
        },
        "required": [
          "token_id"
        ],
        "title": "auth-tokens-get-request"
      },
      "auth-tokens-get-response": {
        "type": "object",
        "description": "The response to get the token metadata.",
        "properties": {
          "token": {
            "$ref": "#/components/schemas/auth-token"
          }
        },
        "required": [
          "token"
        ],
        "title": "auth-tokens-get-response",
        "x-go-name": "AuthTokensGetResponseBody"
      },
      "auth-tokens-list-request": {
        "type": "object",
        "description": "A request to list the token metadata.",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "An identifier that represents the application, which requested the\ntoken. Only relevant for application access tokens.\n"
          },
          "requested_token_type": {
            "$ref": "#/components/schemas/auth-token-requested-token-type"
          },
          "subject": {
            "type": "string",
            "description": "The subject associated with the token. In the absence of this\nparameter, the ID of the authenticated entity is treated as the\nsubject.\n"
          }
        },
        "title": "auth-tokens-list-request"
      },
      "auth-tokens-list-response": {
        "type": "object",
        "description": "The response to list the token metadata.",
        "properties": {
          "tokens": {
            "type": "array",
            "description": "The list of token metadata.",
            "items": {
              "$ref": "#/components/schemas/auth-token"
            }
          }
        },
        "required": [
          "tokens"
        ],
        "title": "auth-tokens-list-response",
        "x-go-name": "AuthTokensListResponseBody"
      },
      "auth-tokens-org-traits": {
        "type": "object",
        "description": "Carries Rev org info.",
        "properties": {
          "custom_fields": {
            "type": "object",
            "description": "Application-defined custom fields of the Rev org."
          },
          "description": {
            "type": "string",
            "description": "The description of the Rev org."
          },
          "display_name": {
            "type": "string",
            "description": "The display name of the Rev org."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the Rev org."
          },
          "phone_numbers": {
            "type": "array",
            "description": "Phone numbers of the Rev org.",
            "items": {
              "type": "string"
            }
          },
          "tier": {
            "type": "string",
            "description": "The tier of the Rev org."
          }
        },
        "title": "auth-tokens-org-traits"
      },
      "auth-tokens-rev-info": {
        "type": "object",
        "description": "Carries info corresponding to the Rev user to be provisioned and/or\nissue a Rev session token.\n",
        "properties": {
          "account_ref": {
            "type": "string",
            "description": "An identifier which uniquely identifies an account."
          },
          "account_traits": {
            "$ref": "#/components/schemas/auth-tokens-account-traits"
          },
          "org_ref": {
            "type": "string",
            "deprecated": true,
            "description": "An identifier which uniquely identifies a Rev org."
          },
          "org_traits": {
            "$ref": "#/components/schemas/auth-tokens-org-traits"
          },
          "user_id": {
            "type": "string",
            "description": "The unique ID of the Rev user."
          },
          "user_ref": {
            "type": "string",
            "description": "An identifier which uniquely identifies a Rev user."
          },
          "user_traits": {
            "$ref": "#/components/schemas/auth-tokens-user-traits"
          },
          "workspace_ref": {
            "type": "string",
            "description": "An identifier which uniquely identifies a workspace."
          },
          "workspace_traits": {
            "$ref": "#/components/schemas/auth-tokens-org-traits"
          }
        },
        "title": "auth-tokens-rev-info"
      },
      "auth-tokens-self-delete-request": {
        "type": "object",
        "description": "The request to delete all the tokens created by the authenticated user,\nthat match with the provided token type.\n",
        "properties": {
          "requested_token_type": {
            "$ref": "#/components/schemas/auth-token-requested-token-type"
          }
        },
        "title": "auth-tokens-self-delete-request"
      },
      "auth-tokens-update-request": {
        "type": "object",
        "description": "A request to update the token metadata.",
        "properties": {
          "token_hint": {
            "type": "string",
            "description": "A hint that identifies the token."
          },
          "token_id": {
            "type": "string",
            "description": "The unique identifier of the token under a given Dev organization.\n"
          }
        },
        "required": [
          "token_hint",
          "token_id"
        ],
        "title": "auth-tokens-update-request"
      },
      "auth-tokens-update-response": {
        "type": "object",
        "description": "Response for the request to update the token metadata.",
        "properties": {
          "token": {
            "$ref": "#/components/schemas/auth-token"
          }
        },
        "required": [
          "token"
        ],
        "title": "auth-tokens-update-response",
        "x-go-name": "AuthTokensUpdateResponseBody"
      },
      "auth-tokens-user-traits": {
        "type": "object",
        "description": "Carries Rev user info.",
        "properties": {
          "custom_fields": {
            "type": "object",
            "description": "Application-defined custom fields of the Rev user."
          },
          "description": {
            "type": "string",
            "description": "The description of the Rev user."
          },
          "display_name": {
            "type": "string",
            "description": "The display name of the Rev user."
          },
          "email": {
            "type": "string",
            "description": "The email address of the Rev user."
          },
          "full_name": {
            "type": "string",
            "deprecated": true,
            "description": "The full name of the Rev user."
          },
          "phone_numbers": {
            "type": "array",
            "description": "Phone numbers of the Rev user.",
            "items": {
              "type": "string"
            }
          }
        },
        "title": "auth-tokens-user-traits"
      },
      "capability": {
        "allOf": [
          {
            "$ref": "#/components/schemas/part-base"
          }
        ],
        "title": "capability"
      },
      "capability-summary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/part-base-summary"
          }
        ],
        "title": "capability-summary"
      },
      "conversation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base"
          },
          {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "Description of the conversation object."
              },
              "group": {
                "$ref": "#/components/schemas/group-summary"
              },
              "members": {
                "type": "array",
                "description": "The users in the conversation.",
                "items": {
                  "$ref": "#/components/schemas/user-summary"
                }
              },
              "messages": {
                "type": "array",
                "description": "The latest messages on the conversation.",
                "items": {
                  "$ref": "#/components/schemas/timeline-entry"
                }
              },
              "metadata": {
                "$ref": "#/components/schemas/conversation-metadata"
              },
              "owned_by": {
                "type": "array",
                "description": "Owner IDs for the conversation.",
                "items": {
                  "$ref": "#/components/schemas/user-summary"
                }
              },
              "sla_tracker": {
                "$ref": "#/components/schemas/sla-tracker-summary"
              },
              "stage": {
                "$ref": "#/components/schemas/legacy-stage"
              },
              "tags": {
                "type": "array",
                "description": "Tags associated with the object.",
                "items": {
                  "$ref": "#/components/schemas/tag-with-value"
                }
              },
              "title": {
                "type": "string",
                "description": "Title of the conversation object."
              }
            },
            "required": [
              "members"
            ]
          }
        ],
        "title": "conversation"
      },
      "conversation-metadata": {
        "type": "object",
        "description": "Metadata on conversation.",
        "properties": {
          "url_context": {
            "type": "string",
            "description": "URL from which the conversation was created if the conversation was\ncreated via PLuG.\n"
          }
        },
        "title": "conversation-metadata"
      },
      "date-filter": {
        "type": "object",
        "description": "Provides ways to specify date ranges on objects.",
        "discriminator": {
          "mapping": {
            "preset": "#/components/schemas/date-time-preset",
            "range": "#/components/schemas/date-time-filter"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/date-time-filter"
          },
          {
            "$ref": "#/components/schemas/date-time-preset"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/date-filter-type"
          }
        },
        "required": [
          "type"
        ],
        "title": "date-filter"
      },
      "date-filter-type": {
        "type": "string",
        "description": "Type of date filter.",
        "enum": [
          "preset",
          "range"
        ]
      },
      "date-time-filter": {
        "type": "object",
        "properties": {
          "after": {
            "type": "string",
            "description": "Filters for objects created after the provided timestamp\n(inclusive).\n",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time"
          },
          "before": {
            "type": "string",
            "description": "Filters for objects created before the provided timestamp\n(inclusive).\n",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time"
          }
        },
        "title": "date-time-filter"
      },
      "date-time-preset": {
        "type": "object",
        "description": "Provides preset types for date filter.",
        "discriminator": {
          "mapping": {
            "last_n_days": "#/components/schemas/date-time-preset-last-n-days",
            "next_n_days": "#/components/schemas/date-time-preset-next-n-days"
          },
          "propertyName": "preset_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/date-time-preset-last-n-days"
          },
          {
            "$ref": "#/components/schemas/date-time-preset-next-n-days"
          }
        ],
        "properties": {
          "preset_type": {
            "$ref": "#/components/schemas/date-time-preset-type"
          }
        },
        "required": [
          "preset_type"
        ],
        "title": "date-time-preset"
      },
      "date-time-preset-last-n-days": {
        "type": "object",
        "properties": {
          "days": {
            "type": "integer",
            "description": "The range starts from the current timestamp and continues for the\npast n days.\n",
            "maximum": 4294967295,
            "minimum": 0
          }
        },
        "required": [
          "days"
        ],
        "title": "date-time-preset-last-n-days"
      },
      "date-time-preset-next-n-days": {
        "type": "object",
        "properties": {
          "days": {
            "type": "integer",
            "description": "The range starts from the current timestamp and continues for the\nnext n days.\n",
            "maximum": 4294967295,
            "minimum": 0
          }
        },
        "required": [
          "days"
        ],
        "title": "date-time-preset-next-n-days"
      },
      "date-time-preset-type": {
        "type": "string",
        "description": "Type of date preset.",
        "enum": [
          "last_n_days",
          "next_n_days"
        ]
      },
      "dev-org-auth-connections-create-request": {
        "type": "object",
        "description": "Request to create a new enterprise authentication connection.\n",
        "discriminator": {
          "mapping": {
            "google_apps": "#/components/schemas/auth-connection-options-google-apps",
            "oidc": "#/components/schemas/auth-connection-options-oidc",
            "samlp": "#/components/schemas/auth-connection-options-saml",
            "waad": "#/components/schemas/auth-connection-options-azure-ad"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/auth-connection-options-azure-ad"
          },
          {
            "$ref": "#/components/schemas/auth-connection-options-google-apps"
          },
          {
            "$ref": "#/components/schemas/auth-connection-options-oidc"
          },
          {
            "$ref": "#/components/schemas/auth-connection-options-saml"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/dev-org-auth-connections-create-request-type"
          },
          "display_name": {
            "type": "string",
            "description": "Display name of the authentication connection. This name will be\nvisible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n"
          }
        },
        "required": [
          "type"
        ],
        "title": "dev-org-auth-connections-create-request"
      },
      "dev-org-auth-connections-create-request-type": {
        "type": "string",
        "description": "Defines the type for the authentication connection. Different types of\nauthentication connections have different configuration parameters.\n",
        "enum": [
          "google_apps",
          "oidc",
          "samlp",
          "waad"
        ]
      },
      "dev-org-auth-connections-create-response": {
        "type": "object",
        "description": "Response for the request to create a new enterprise authentication\nconnection.\n",
        "properties": {
          "auth_connection": {
            "$ref": "#/components/schemas/auth-connection"
          }
        },
        "required": [
          "auth_connection"
        ],
        "title": "dev-org-auth-connections-create-response",
        "x-go-name": "DevOrgAuthConnectionsCreateResponseBody"
      },
      "dev-org-auth-connections-delete-request": {
        "type": "object",
        "description": "Request to delete an enterprise authentication connection for a Dev\norganization. A default connection and a connection which is currently\nenabled cannot be deleted.\n",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the authentication connection to be deleted."
          }
        },
        "required": [
          "id"
        ],
        "title": "dev-org-auth-connections-delete-request"
      },
      "dev-org-auth-connections-get-request": {
        "type": "object",
        "description": "Request to get configuration details of organization's authentication\nConnection.\n",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the authentication connection."
          }
        },
        "required": [
          "id"
        ],
        "title": "dev-org-auth-connections-get-request"
      },
      "dev-org-auth-connections-get-response": {
        "type": "object",
        "description": "Response object encapsulating the configuration details of an\nauthentication connection.\n",
        "properties": {
          "auth_connection": {
            "$ref": "#/components/schemas/auth-connection"
          }
        },
        "required": [
          "auth_connection"
        ],
        "title": "dev-org-auth-connections-get-response",
        "x-go-name": "DevOrgAuthConnectionsGetResponseBody"
      },
      "dev-org-auth-connections-list-response": {
        "type": "object",
        "description": "Response object for the request to list all the social and enterprise\nauthentication connections configured for a Dev organization.\n",
        "properties": {
          "auth_connections": {
            "type": "array",
            "description": "List of all the authentication connections currently configured for\na Dev organization.\n",
            "items": {
              "$ref": "#/components/schemas/auth-connection"
            }
          }
        },
        "required": [
          "auth_connections"
        ],
        "title": "dev-org-auth-connections-list-response",
        "x-go-name": "DevOrgAuthConnectionsListResponseBody"
      },
      "dev-org-auth-connections-toggle-request": {
        "type": "object",
        "description": "Request to enable or disable an authentication connection for a Dev\norganization.\n",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the authentication connection to be toggled."
          },
          "toggle": {
            "$ref": "#/components/schemas/auth-connection-toggle"
          }
        },
        "required": [
          "id"
        ],
        "title": "dev-org-auth-connections-toggle-request"
      },
      "dev-org-auth-connections-update-request": {
        "type": "object",
        "description": "Request to update an enterprise authentication connection for a Dev\norganization.\n",
        "discriminator": {
          "mapping": {
            "google_apps": "#/components/schemas/auth-connection-options-google-apps",
            "none": "#/components/schemas/empty",
            "oidc": "#/components/schemas/auth-connection-options-oidc",
            "samlp": "#/components/schemas/auth-connection-options-saml",
            "waad": "#/components/schemas/auth-connection-options-azure-ad"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/auth-connection-options-azure-ad"
          },
          {
            "$ref": "#/components/schemas/auth-connection-options-google-apps"
          },
          {
            "$ref": "#/components/schemas/auth-connection-options-oidc"
          },
          {
            "$ref": "#/components/schemas/auth-connection-options-saml"
          },
          {
            "$ref": "#/components/schemas/empty"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/dev-org-auth-connections-update-request-type"
          },
          "display_name": {
            "type": "string",
            "description": "New display name of the authentication connection. This name will\nbe visible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n"
          },
          "id": {
            "type": "string",
            "description": "ID of the authentication connection which is to be updated.\n"
          }
        },
        "required": [
          "id"
        ],
        "title": "dev-org-auth-connections-update-request"
      },
      "dev-org-auth-connections-update-request-type": {
        "type": "string",
        "description": "Specifies the type for the authentication connection. Different types\nof authentication connections have different configuration parameters\nthat can be updated.\n",
        "enum": [
          "google_apps",
          "none",
          "oidc",
          "samlp",
          "waad"
        ]
      },
      "dev-org-auth-connections-update-response": {
        "type": "object",
        "description": "Response for the request to update an enterprise authentication\nconnection.\n",
        "properties": {
          "auth_connection": {
            "$ref": "#/components/schemas/auth-connection"
          }
        },
        "required": [
          "auth_connection"
        ],
        "title": "dev-org-auth-connections-update-response",
        "x-go-name": "DevOrgAuthConnectionsUpdateResponseBody"
      },
      "dev-user": {
        "allOf": [
          {
            "$ref": "#/components/schemas/user-base"
          },
          {
            "type": "object",
            "properties": {
              "experience_start_date": {
                "type": "string",
                "description": "Start date of the user's employment.",
                "example": "2023-01-01T12:00:00.000Z",
                "format": "date-time"
              },
              "external_identities": {
                "type": "array",
                "description": "IDs of the Dev User outside the DevRev SOR.",
                "items": {
                  "$ref": "#/components/schemas/external-identity"
                }
              },
              "job_history": {
                "type": "array",
                "description": "Job history of the user.",
                "items": {
                  "$ref": "#/components/schemas/job-history-item"
                }
              },
              "skills": {
                "type": "array",
                "description": "Array of skills of the user.",
                "items": {
                  "$ref": "#/components/schemas/user-skill"
                }
              }
            }
          }
        ],
        "title": "dev-user"
      },
      "dev-user-external-identity-filter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the user in the external source."
          },
          "issuer": {
            "type": "string",
            "description": "Issuer of the external identity of the user."
          }
        },
        "title": "dev-user-external-identity-filter"
      },
      "dev-user-summary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/user-base-summary"
          }
        ],
        "title": "dev-user-summary"
      },
      "dev-users-get-request": {
        "type": "object",
        "description": "A request to get a Dev user's information.",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID of the requested Dev user."
          }
        },
        "required": [
          "id"
        ],
        "title": "dev-users-get-request"
      },
      "dev-users-get-response": {
        "type": "object",
        "description": "The response to getting the information for the Dev user.",
        "properties": {
          "dev_user": {
            "$ref": "#/components/schemas/dev-user"
          }
        },
        "required": [
          "dev_user"
        ],
        "title": "dev-users-get-response",
        "x-go-name": "DevUsersGetResponseBody"
      },
      "dev-users-list-request": {
        "type": "object",
        "description": "A request to get the list of Dev user's information.",
        "properties": {
          "created_date": {
            "$ref": "#/components/schemas/date-filter"
          },
          "cursor": {
            "type": "string",
            "description": "The cursor to resume iteration from. If not provided, then\niteration starts from the beginning.\n"
          },
          "email": {
            "type": "array",
            "description": "Filters Dev users based on email addresses.",
            "items": {
              "type": "string"
            }
          },
          "external_identity": {
            "type": "array",
            "description": "Filters Dev users based on external identity.",
            "items": {
              "$ref": "#/components/schemas/dev-user-external-identity-filter"
            }
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of Dev users to return. The default is '50'.\n",
            "format": "int32"
          },
          "mode": {
            "$ref": "#/components/schemas/list-mode"
          },
          "modified_date": {
            "$ref": "#/components/schemas/date-filter"
          },
          "sort_by": {
            "type": "array",
            "description": "Fields to sort the Dev users by and the direction to sort them.\n",
            "items": {
              "type": "string"
            }
          },
          "state": {
            "type": "array",
            "description": "Filters Dev users based on state.",
            "items": {
              "$ref": "#/components/schemas/user-state"
            }
          }
        },
        "title": "dev-users-list-request"
      },
      "dev-users-list-response": {
        "type": "object",
        "description": "The response to listing the Dev users.",
        "properties": {
          "dev_users": {
            "type": "array",
            "description": "The list of Dev users.",
            "items": {
              "$ref": "#/components/schemas/dev-user"
            }
          },
          "next_cursor": {
            "type": "string",
            "description": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n"
          },
          "prev_cursor": {
            "type": "string",
            "description": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n"
          }
        },
        "required": [
          "dev_users"
        ],
        "title": "dev-users-list-response",
        "x-go-name": "DevUsersListResponseBody"
      },
      "dev-users-self-request": {
        "type": "object",
        "additionalProperties": false,
        "description": "A request to get the authenticated user's information.",
        "title": "dev-users-self-request"
      },
      "dev-users-self-response": {
        "type": "object",
        "description": "The response to getting the information for the authenticated user.\n",
        "properties": {
          "dev_user": {
            "$ref": "#/components/schemas/dev-user"
          }
        },
        "required": [
          "dev_user"
        ],
        "title": "dev-users-self-response",
        "x-go-name": "DevUsersSelfResponseBody"
      },
      "empty": {
        "type": "object",
        "additionalProperties": false,
        "title": "empty"
      },
      "enhancement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/part-base"
          }
        ],
        "title": "enhancement"
      },
      "enhancement-summary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/part-base-summary"
          }
        ],
        "title": "enhancement-summary"
      },
      "enum-value": {
        "type": "object",
        "description": "The properties of an enum value.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The uiique ID of the enum value.",
            "format": "int64"
          },
          "label": {
            "type": "string",
            "description": "The display label of the enum value."
          },
          "ordinal": {
            "type": "integer",
            "description": "Used for determining the relative order of the enum value.\n",
            "format": "int64"
          }
        },
        "required": [
          "id",
          "label",
          "ordinal"
        ],
        "title": "enum-value"
      },
      "error-bad-request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/error-base"
          },
          {
            "type": "object",
            "discriminator": {
              "mapping": {
                "artifact_already_attached_to_a_parent": "#/components/schemas/error-bad-request-artifact-already-attached-to-a-parent",
                "bad_request": "#/components/schemas/error-bad-request-bad-request",
                "invalid_api_version": "#/components/schemas/error-bad-request-invalid-api-version",
                "invalid_enum_value": "#/components/schemas/error-bad-request-invalid-enum-value",
                "invalid_field": "#/components/schemas/error-bad-request-invalid-field",
                "invalid_id": "#/components/schemas/error-bad-request-invalid-id",
                "merge_works_error": "#/components/schemas/error-bad-request-merge-works-error",
                "missing_dependency": "#/components/schemas/error-bad-request-missing-dependency",
                "missing_required_field": "#/components/schemas/error-bad-request-missing-required-field",
                "parse_error": "#/components/schemas/error-bad-request-parse-error",
                "stale_schema_fragments": "#/components/schemas/error-bad-request-stale-schema-fragments",
                "unexpected_id_type": "#/components/schemas/error-bad-request-unexpected-id-type",
                "unexpected_json_type": "#/components/schemas/error-bad-request-unexpected-json-type",
                "value_not_permitted": "#/components/schemas/error-bad-request-value-not-permitted"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/error-bad-request-artifact-already-attached-to-a-parent"
              },
              {
                "$ref": "#/components/schemas/error-bad-request-bad-request"
              },
              {
                "$ref": "#/components/schemas/error-bad-request-invalid-api-version"
              },
              {
                "$ref": "#/components/schemas/error-bad-request-invalid-enum-value"
              },
              {
                "$ref": "#/components/schemas/error-bad-request-invalid-field"
              },
              {
                "$ref": "#/components/schemas/error-bad-request-invalid-id"
              },
              {
                "$ref": "#/components/schemas/error-bad-request-merge-works-error"
              },
              {
                "$ref": "#/components/schemas/error-bad-request-missing-dependency"
              },
              {
                "$ref": "#/components/schemas/error-bad-request-missing-required-field"
              },
              {
                "$ref": "#/components/schemas/error-bad-request-parse-error"
              },
              {
                "$ref": "#/components/schemas/error-bad-request-stale-schema-fragments"
              },
              {
                "$ref": "#/components/schemas/error-bad-request-unexpected-id-type"
              },
              {
                "$ref": "#/components/schemas/error-bad-request-unexpected-json-type"
              },
              {
                "$ref": "#/components/schemas/error-bad-request-value-not-permitted"
              }
            ],
            "properties": {
              "type": {
                "$ref": "#/components/schemas/error-bad-request-type"
              }
            },
            "required": [
              "type"
            ]
          }
        ],
        "title": "error-bad-request"
      },
      "error-bad-request-artifact-already-attached-to-a-parent": {
        "type": "object",
        "properties": {
          "existing_parent": {
            "type": "string",
            "description": "The existing parent attached to the artifact."
          },
          "is_same": {
            "type": "boolean",
            "description": "Whether the existing parent is the same as the new parent.\n"
          }
        },
        "required": [
          "existing_parent",
          "is_same"
        ],
        "title": "error-bad-request-artifact-already-attached-to-a-parent"
      },
      "error-bad-request-bad-request": {
        "type": "object",
        "additionalProperties": false,
        "title": "error-bad-request-bad-request"
      },
      "error-bad-request-invalid-api-version": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "The provided API version."
          }
        },
        "required": [
          "value"
        ],
        "title": "error-bad-request-invalid-api-version"
      },
      "error-bad-request-invalid-enum-value": {
        "type": "object",
        "properties": {
          "allowed_values": {
            "type": "array",
            "description": "The allowed values for the field.",
            "items": {
              "type": "string"
            }
          },
          "field_name": {
            "type": "string",
            "description": "The field whose enum value is invalid."
          },
          "value": {
            "type": "string",
            "description": "The value that was received."
          }
        },
        "required": [
          "allowed_values",
          "field_name",
          "value"
        ],
        "title": "error-bad-request-invalid-enum-value"
      },
      "error-bad-request-invalid-field": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "description": "The field name that's invalid."
          }
        },
        "required": [
          "field_name"
        ],
        "title": "error-bad-request-invalid-field"
      },
      "error-bad-request-invalid-id": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "description": "The field whose ID is invalid."
          }
        },
        "required": [
          "field_name"
        ],
        "title": "error-bad-request-invalid-id"
      },
      "error-bad-request-merge-works-error": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "description": "The errors encountered during the validation of the merge.\n",
            "items": {
              "$ref": "#/components/schemas/error-bad-request-merge-works-error-error"
            }
          }
        },
        "title": "error-bad-request-merge-works-error"
      },
      "error-bad-request-merge-works-error-error": {
        "type": "object",
        "properties": {
          "already_merged": {
            "$ref": "#/components/schemas/error-bad-request-merge-works-error-error-already-merged"
          },
          "closed": {
            "$ref": "#/components/schemas/error-bad-request-merge-works-error-error-closed"
          },
          "details": {
            "type": "string",
            "description": "The details of the error."
          },
          "different_workspace": {
            "$ref": "#/components/schemas/error-bad-request-merge-works-error-error-different-workspace"
          },
          "invalid_stage_transition": {
            "$ref": "#/components/schemas/error-bad-request-merge-works-error-error-invalid-stage-transition"
          },
          "subtype": {
            "type": "string",
            "enum": [
              "already_merged",
              "closed",
              "different_workspace",
              "invalid_stage_transition"
            ]
          },
          "work": {
            "type": "string",
            "description": "The ID of the work which failed the validation."
          }
        },
        "required": [
          "details",
          "work"
        ],
        "title": "error-bad-request-merge-works-error-error"
      },
      "error-bad-request-merge-works-error-error-already-merged": {
        "type": "object",
        "properties": {
          "merged_into": {
            "type": "string",
            "description": "ID of the work into which the work was merged."
          }
        },
        "required": [
          "merged_into"
        ],
        "title": "error-bad-request-merge-works-error-error-already-merged"
      },
      "error-bad-request-merge-works-error-error-closed": {
        "type": "object",
        "additionalProperties": false,
        "title": "error-bad-request-merge-works-error-error-closed"
      },
      "error-bad-request-merge-works-error-error-different-workspace": {
        "type": "object",
        "properties": {
          "primary_workspace": {
            "type": "string",
            "description": "The workspace of the primary work."
          },
          "secondary_workspace": {
            "type": "string",
            "description": "The workspace of the secondary work."
          }
        },
        "required": [
          "primary_workspace",
          "secondary_workspace"
        ],
        "title": "error-bad-request-merge-works-error-error-different-workspace"
      },
      "error-bad-request-merge-works-error-error-invalid-stage-transition": {
        "type": "object",
        "properties": {
          "current_stage": {
            "type": "string",
            "description": "The current stage of the work."
          },
          "requested_stage": {
            "type": "string",
            "description": "The stage to which the transition isn't allowed."
          }
        },
        "required": [
          "current_stage",
          "requested_stage"
        ],
        "title": "error-bad-request-merge-works-error-error-invalid-stage-transition"
      },
      "error-bad-request-missing-dependency": {
        "type": "object",
        "properties": {
          "dependencies": {
            "type": "array",
            "description": "The dependent fields.",
            "items": {
              "$ref": "#/components/schemas/error-bad-request-missing-dependency-dependency"
            }
          },
          "dependent_field_name": {
            "type": "string",
            "description": "The field on which the value depends."
          },
          "dependent_field_value": {
            "type": "string",
            "description": "The value which needs to be set of the dependent field."
          },
          "provided_field_name": {
            "type": "string",
            "description": "The field whose value was received."
          },
          "provided_field_value": {
            "type": "string",
            "description": "The value that was received."
          }
        },
        "title": "error-bad-request-missing-dependency"
      },
      "error-bad-request-missing-dependency-dependency": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "description": "The dependent field name."
          },
          "field_value": {
            "type": "string",
            "description": "The dependent field value."
          }
        },
        "required": [
          "field_name",
          "field_value"
        ],
        "title": "error-bad-request-missing-dependency-dependency"
      },
      "error-bad-request-missing-required-field": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "description": "The missing field's name."
          }
        },
        "required": [
          "field_name"
        ],
        "title": "error-bad-request-missing-required-field"
      },
      "error-bad-request-parse-error": {
        "type": "object",
        "additionalProperties": false,
        "title": "error-bad-request-parse-error"
      },
      "error-bad-request-stale-schema-fragments": {
        "type": "object",
        "additionalProperties": false,
        "description": "Error indicating that the request contained one or more stale schema\nfragments, which are schema fragments that have been replaced by a\nnewer version and are therefore considered deprecated schema fragments.\nThe caller should refresh and use the latest schema fragments in their\nrequest.\n",
        "title": "error-bad-request-stale-schema-fragments"
      },
      "error-bad-request-type": {
        "type": "string",
        "enum": [
          "artifact_already_attached_to_a_parent",
          "bad_request",
          "invalid_api_version",
          "invalid_enum_value",
          "invalid_field",
          "invalid_id",
          "merge_works_error",
          "missing_dependency",
          "missing_required_field",
          "parse_error",
          "stale_schema_fragments",
          "unexpected_id_type",
          "unexpected_json_type",
          "value_not_permitted"
        ]
      },
      "error-bad-request-unexpected-id-type": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "description": "The field whose ID type is unexpected."
          }
        },
        "required": [
          "field_name"
        ],
        "title": "error-bad-request-unexpected-id-type"
      },
      "error-bad-request-unexpected-json-type": {
        "type": "object",
        "properties": {
          "actual": {
            "$ref": "#/components/schemas/error-bad-request-unexpected-json-type-type"
          },
          "expected": {
            "$ref": "#/components/schemas/error-bad-request-unexpected-json-type-type"
          },
          "field_name": {
            "type": "string",
            "description": "The field name that's invalid."
          }
        },
        "required": [
          "actual",
          "expected",
          "field_name"
        ],
        "title": "error-bad-request-unexpected-json-type"
      },
      "error-bad-request-unexpected-json-type-type": {
        "type": "string",
        "enum": [
          "array",
          "bool",
          "null",
          "number",
          "object",
          "string"
        ]
      },
      "error-bad-request-value-not-permitted": {
        "type": "object",
        "properties": {
          "allowed_values": {
            "type": "array",
            "description": "The allowed values for the field.",
            "items": {
              "type": "string"
            }
          },
          "field_name": {
            "type": "string",
            "description": "The field whose value is not permitted."
          },
          "reason": {
            "type": "string",
            "description": "The reason the value isn't permitted."
          }
        },
        "required": [
          "field_name"
        ],
        "title": "error-bad-request-value-not-permitted"
      },
      "error-base": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "string",
            "description": "Error detail information."
          },
          "message": {
            "type": "string",
            "description": "The message associated with the error."
          }
        },
        "title": "error-base"
      },
      "error-conflict": {
        "allOf": [
          {
            "$ref": "#/components/schemas/error-base"
          },
          {
            "type": "object",
            "discriminator": {
              "mapping": {
                "conflict": "#/components/schemas/error-conflict-conflict"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/error-conflict-conflict"
              }
            ],
            "properties": {
              "type": {
                "$ref": "#/components/schemas/error-conflict-type"
              }
            },
            "required": [
              "type"
            ]
          }
        ],
        "title": "error-conflict"
      },
      "error-conflict-conflict": {
        "type": "object",
        "additionalProperties": false,
        "title": "error-conflict-conflict"
      },
      "error-conflict-type": {
        "type": "string",
        "enum": [
          "conflict"
        ]
      },
      "error-forbidden": {
        "allOf": [
          {
            "$ref": "#/components/schemas/error-base"
          },
          {
            "type": "object",
            "discriminator": {
              "mapping": {
                "forbidden": "#/components/schemas/error-forbidden-forbidden"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/error-forbidden-forbidden"
              }
            ],
            "properties": {
              "type": {
                "$ref": "#/components/schemas/error-forbidden-type"
              }
            },
            "required": [
              "type"
            ]
          }
        ],
        "title": "error-forbidden"
      },
      "error-forbidden-forbidden": {
        "type": "object",
        "additionalProperties": false,
        "title": "error-forbidden-forbidden"
      },
      "error-forbidden-type": {
        "type": "string",
        "enum": [
          "forbidden"
        ]
      },
      "error-internal-server-error": {
        "allOf": [
          {
            "$ref": "#/components/schemas/error-base"
          },
          {
            "type": "object",
            "discriminator": {
              "mapping": {
                "internal_error": "#/components/schemas/error-internal-server-error-internal-error"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/error-internal-server-error-internal-error"
              }
            ],
            "properties": {
              "type": {
                "$ref": "#/components/schemas/error-internal-server-error-type"
              },
              "reference_id": {
                "type": "string",
                "description": "A unique ID that's generated for the error that can be used for\ninquiry.\n"
              }
            },
            "required": [
              "type"
            ]
          }
        ],
        "title": "error-internal-server-error"
      },
      "error-internal-server-error-internal-error": {
        "type": "object",
        "additionalProperties": false,
        "title": "error-internal-server-error-internal-error"
      },
      "error-internal-server-error-type": {
        "type": "string",
        "enum": [
          "internal_error"
        ]
      },
      "error-not-found": {
        "allOf": [
          {
            "$ref": "#/components/schemas/error-base"
          },
          {
            "type": "object",
            "discriminator": {
              "mapping": {
                "not_found": "#/components/schemas/error-not-found-not-found"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/error-not-found-not-found"
              }
            ],
            "properties": {
              "type": {
                "$ref": "#/components/schemas/error-not-found-type"
              }
            },
            "required": [
              "type"
            ]
          }
        ],
        "title": "error-not-found"
      },
      "error-not-found-not-found": {
        "type": "object",
        "additionalProperties": false,
        "title": "error-not-found-not-found"
      },
      "error-not-found-type": {
        "type": "string",
        "enum": [
          "not_found"
        ]
      },
      "error-service-unavailable": {
        "allOf": [
          {
            "$ref": "#/components/schemas/error-base"
          },
          {
            "type": "object",
            "discriminator": {
              "mapping": {
                "service_unavailable": "#/components/schemas/error-service-unavailable-service-unavailable"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/error-service-unavailable-service-unavailable"
              }
            ],
            "properties": {
              "type": {
                "$ref": "#/components/schemas/error-service-unavailable-type"
              }
            },
            "required": [
              "type"
            ]
          }
        ],
        "title": "error-service-unavailable"
      },
      "error-service-unavailable-service-unavailable": {
        "type": "object",
        "additionalProperties": false,
        "title": "error-service-unavailable-service-unavailable"
      },
      "error-service-unavailable-type": {
        "type": "string",
        "enum": [
          "service_unavailable"
        ]
      },
      "error-too-many-requests": {
        "allOf": [
          {
            "$ref": "#/components/schemas/error-base"
          },
          {
            "type": "object",
            "discriminator": {
              "mapping": {
                "too_many_requests": "#/components/schemas/error-too-many-requests-too-many-requests"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/error-too-many-requests-too-many-requests"
              }
            ],
            "properties": {
              "type": {
                "$ref": "#/components/schemas/error-too-many-requests-type"
              },
              "retry_after": {
                "type": "integer",
                "description": "The number of seconds after which the client should retry.\n",
                "format": "int64"
              }
            },
            "required": [
              "type"
            ]
          }
        ],
        "title": "error-too-many-requests"
      },
      "error-too-many-requests-too-many-requests": {
        "type": "object",
        "additionalProperties": false,
        "title": "error-too-many-requests-too-many-requests"
      },
      "error-too-many-requests-type": {
        "type": "string",
        "enum": [
          "too_many_requests"
        ]
      },
      "error-unauthorized": {
        "allOf": [
          {
            "$ref": "#/components/schemas/error-base"
          },
          {
            "type": "object",
            "discriminator": {
              "mapping": {
                "unauthenticated": "#/components/schemas/error-unauthorized-unauthenticated"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/error-unauthorized-unauthenticated"
              }
            ],
            "properties": {
              "type": {
                "$ref": "#/components/schemas/error-unauthorized-type"
              }
            },
            "required": [
              "type"
            ]
          }
        ],
        "title": "error-unauthorized"
      },
      "error-unauthorized-type": {
        "type": "string",
        "enum": [
          "unauthenticated"
        ]
      },
      "error-unauthorized-unauthenticated": {
        "type": "object",
        "additionalProperties": false,
        "title": "error-unauthorized-unauthenticated"
      },
      "event-account-created": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/account"
          }
        },
        "required": [
          "account"
        ],
        "title": "event-account-created"
      },
      "event-account-deleted": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the account that was deleted.",
            "example": "ACC-12345"
          },
          "old_account": {
            "$ref": "#/components/schemas/account"
          }
        },
        "required": [
          "id"
        ],
        "title": "event-account-deleted"
      },
      "event-account-updated": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/account"
          },
          "old_account": {
            "$ref": "#/components/schemas/account"
          }
        },
        "required": [
          "account"
        ],
        "title": "event-account-updated"
      },
      "event-conversation-created": {
        "type": "object",
        "properties": {
          "conversation": {
            "$ref": "#/components/schemas/conversation"
          }
        },
        "required": [
          "conversation"
        ],
        "title": "event-conversation-created"
      },
      "event-conversation-deleted": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the conversation that was deleted."
          }
        },
        "required": [
          "id"
        ],
        "title": "event-conversation-deleted"
      },
      "event-conversation-updated": {
        "type": "object",
        "properties": {
          "conversation": {
            "$ref": "#/components/schemas/conversation"
          }
        },
        "required": [
          "conversation"
        ],
        "title": "event-conversation-updated"
      },
      "event-dev-user-created": {
        "type": "object",
        "properties": {
          "dev_user": {
            "$ref": "#/components/schemas/dev-user"
          }
        },
        "required": [
          "dev_user"
        ],
        "title": "event-dev-user-created"
      },
      "event-dev-user-deleted": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Dev user that was deleted."
          },
          "old_dev_user": {
            "$ref": "#/components/schemas/dev-user"
          }
        },
        "required": [
          "id"
        ],
        "title": "event-dev-user-deleted"
      },
      "event-dev-user-updated": {
        "type": "object",
        "properties": {
          "dev_user": {
            "$ref": "#/components/schemas/dev-user"
          },
          "old_dev_user": {
            "$ref": "#/components/schemas/dev-user"
          }
        },
        "required": [
          "dev_user"
        ],
        "title": "event-dev-user-updated"
      },
      "event-group-created": {
        "type": "object",
        "properties": {
          "group": {
            "$ref": "#/components/schemas/group"
          }
        },
        "required": [
          "group"
        ],
        "title": "event-group-created"
      },
      "event-group-deleted": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the group that was deleted."
          },
          "old_group": {
            "$ref": "#/components/schemas/group"
          }
        },
        "required": [
          "id"
        ],
        "title": "event-group-deleted"
      },
      "event-group-member-added": {
        "type": "object",
        "properties": {
          "group": {
            "$ref": "#/components/schemas/group-summary"
          },
          "member": {
            "$ref": "#/components/schemas/user-summary"
          }
        },
        "required": [
          "group",
          "member"
        ],
        "title": "event-group-member-added"
      },
      "event-group-member-removed": {
        "type": "object",
        "properties": {
          "group": {
            "$ref": "#/components/schemas/group-summary"
          },
          "member": {
            "$ref": "#/components/schemas/user-summary"
          }
        },
        "required": [
          "group",
          "member"
        ],
        "title": "event-group-member-removed"
      },
      "event-group-updated": {
        "type": "object",
        "properties": {
          "group": {
            "$ref": "#/components/schemas/group"
          },
          "old_group": {
            "$ref": "#/components/schemas/group"
          }
        },
        "required": [
          "group"
        ],
        "title": "event-group-updated"
      },
      "event-part-created": {
        "type": "object",
        "properties": {
          "part": {
            "$ref": "#/components/schemas/part"
          }
        },
        "required": [
          "part"
        ],
        "title": "event-part-created"
      },
      "event-part-deleted": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the part that was deleted.",
            "example": "PROD-12345"
          },
          "old_part": {
            "$ref": "#/components/schemas/part"
          }
        },
        "required": [
          "id"
        ],
        "title": "event-part-deleted"
      },
      "event-part-updated": {
        "type": "object",
        "properties": {
          "old_part": {
            "$ref": "#/components/schemas/part"
          },
          "part": {
            "$ref": "#/components/schemas/part"
          }
        },
        "required": [
          "part"
        ],
        "title": "event-part-updated"
      },
      "event-rev-org-created": {
        "type": "object",
        "properties": {
          "rev_org": {
            "$ref": "#/components/schemas/rev-org"
          }
        },
        "required": [
          "rev_org"
        ],
        "title": "event-rev-org-created"
      },
      "event-rev-org-deleted": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Rev organization that was deleted.",
            "example": "REV-AbCdEfGh"
          },
          "old_rev_org": {
            "$ref": "#/components/schemas/rev-org"
          }
        },
        "required": [
          "id"
        ],
        "title": "event-rev-org-deleted"
      },
      "event-rev-org-updated": {
        "type": "object",
        "properties": {
          "old_rev_org": {
            "$ref": "#/components/schemas/rev-org"
          },
          "rev_org": {
            "$ref": "#/components/schemas/rev-org"
          }
        },
        "required": [
          "rev_org"
        ],
        "title": "event-rev-org-updated"
      },
      "event-rev-user-created": {
        "type": "object",
        "properties": {
          "rev_user": {
            "$ref": "#/components/schemas/rev-user"
          }
        },
        "required": [
          "rev_user"
        ],
        "title": "event-rev-user-created"
      },
      "event-rev-user-deleted": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Rev user that was deleted."
          },
          "old_rev_user": {
            "$ref": "#/components/schemas/rev-user"
          }
        },
        "required": [
          "id"
        ],
        "title": "event-rev-user-deleted"
      },
      "event-rev-user-updated": {
        "type": "object",
        "properties": {
          "old_rev_user": {
            "$ref": "#/components/schemas/rev-user"
          },
          "rev_user": {
            "$ref": "#/components/schemas/rev-user"
          }
        },
        "required": [
          "rev_user"
        ],
        "title": "event-rev-user-updated"
      },
      "event-sla-tracker-created": {
        "type": "object",
        "properties": {
          "sla_tracker": {
            "$ref": "#/components/schemas/sla-tracker"
          }
        },
        "required": [
          "sla_tracker"
        ],
        "title": "event-sla-tracker-created"
      },
      "event-sla-tracker-deleted": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the SLA tracker that was deleted."
          }
        },
        "required": [
          "id"
        ],
        "title": "event-sla-tracker-deleted"
      },
      "event-sla-tracker-updated": {
        "type": "object",
        "properties": {
          "sla_tracker": {
            "$ref": "#/components/schemas/sla-tracker"
          }
        },
        "required": [
          "sla_tracker"
        ],
        "title": "event-sla-tracker-updated"
      },
      "event-survey-response-created": {
        "type": "object",
        "properties": {
          "survey_response": {
            "$ref": "#/components/schemas/survey-response"
          }
        },
        "required": [
          "survey_response"
        ],
        "title": "event-survey-response-created"
      },
      "event-survey-response-deleted": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the survey response that was deleted."
          }
        },
        "required": [
          "id"
        ],
        "title": "event-survey-response-deleted"
      },
      "event-survey-response-updated": {
        "type": "object",
        "properties": {
          "survey_response": {
            "$ref": "#/components/schemas/survey-response"
          }
        },
        "required": [
          "survey_response"
        ],
        "title": "event-survey-response-updated"
      },
      "event-tag-created": {
        "type": "object",
        "properties": {
          "tag": {
            "$ref": "#/components/schemas/tag"
          }
        },
        "required": [
          "tag"
        ],
        "title": "event-tag-created"
      },
      "event-tag-deleted": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the tag that was deleted.",
            "example": "TAG-12345"
          }
        },
        "required": [
          "id"
        ],
        "title": "event-tag-deleted"
      },
      "event-tag-updated": {
        "type": "object",
        "properties": {
          "tag": {
            "$ref": "#/components/schemas/tag"
          }
        },
        "required": [
          "tag"
        ],
        "title": "event-tag-updated"
      },
      "event-timeline-entry-created": {
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/timeline-entry"
          }
        },
        "required": [
          "entry"
        ],
        "title": "event-timeline-entry-created"
      },
      "event-timeline-entry-deleted": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the timeline entry that was deleted.",
            "example": "don:core:<partition>:devo/<dev-org-id>:ticket/123:timeline_event/<timeline-event-id>"
          }
        },
        "required": [
          "id"
        ],
        "title": "event-timeline-entry-deleted"
      },
      "event-timeline-entry-updated": {
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/timeline-entry"
          }
        },
        "required": [
          "entry"
        ],
        "title": "event-timeline-entry-updated"
      },
      "event-webhook-created": {
        "type": "object",
        "properties": {
          "webhook": {
            "$ref": "#/components/schemas/webhook"
          }
        },
        "required": [
          "webhook"
        ],
        "title": "event-webhook-created"
      },
      "event-webhook-deleted": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the webhook that was deleted.",
            "example": "don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>"
          }
        },
        "required": [
          "id"
        ],
        "title": "event-webhook-deleted"
      },
      "event-webhook-updated": {
        "type": "object",
        "properties": {
          "webhook": {
            "$ref": "#/components/schemas/webhook"
          }
        },
        "required": [
          "webhook"
        ],
        "title": "event-webhook-updated"
      },
      "event-work-created": {
        "type": "object",
        "properties": {
          "work": {
            "$ref": "#/components/schemas/work"
          }
        },
        "required": [
          "work"
        ],
        "title": "event-work-created"
      },
      "event-work-deleted": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the work that was deleted.",
            "example": "ISS-12345"
          },
          "old_work": {
            "$ref": "#/components/schemas/work"
          }
        },
        "required": [
          "id"
        ],
        "title": "event-work-deleted"
      },
      "event-work-updated": {
        "type": "object",
        "properties": {
          "old_work": {
            "$ref": "#/components/schemas/work"
          },
          "work": {
            "$ref": "#/components/schemas/work"
          }
        },
        "required": [
          "work"
        ],
        "title": "event-work-updated"
      },
      "external-identity": {
        "type": "object",
        "description": "External identity of a user.",
        "properties": {
          "display_name": {
            "type": "string",
            "description": "Display name of the user in the external source."
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the user in the external source."
          },
          "is_verified": {
            "type": "boolean",
            "description": "Whether the external identity is verified or not."
          },
          "issuer": {
            "type": "string",
            "description": "Issuer of the external identity of the user."
          }
        },
        "title": "external-identity"
      },
      "feature": {
        "allOf": [
          {
            "$ref": "#/components/schemas/part-base"
          }
        ],
        "title": "feature"
      },
      "feature-summary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/part-base-summary"
          }
        ],
        "title": "feature-summary"
      },
      "group": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base"
          }
        ],
        "title": "group"
      },
      "group-summary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base-summary"
          }
        ],
        "title": "group-summary"
      },
      "issue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/work-base"
          },
          {
            "type": "object",
            "properties": {
              "developed_with": {
                "type": "array",
                "description": "Parts associated based on git events.",
                "items": {
                  "$ref": "#/components/schemas/part-summary"
                }
              },
              "priority": {
                "$ref": "#/components/schemas/issue-priority"
              },
              "sla_tracker": {
                "$ref": "#/components/schemas/sla-tracker-summary"
              },
              "sprint": {
                "$ref": "#/components/schemas/vista-group-item-summary"
              },
              "target_start_date": {
                "type": "string",
                "description": "Target start date for the object.",
                "example": "2023-01-01T12:00:00.000Z",
                "format": "date-time"
              }
            }
          }
        ],
        "title": "issue"
      },
      "issue-priority": {
        "type": "string",
        "description": "Priority of the work based upon impact and criticality.",
        "enum": [
          "p0",
          "p1",
          "p2",
          "p3"
        ]
      },
      "job-history-item": {
        "type": "object",
        "description": "Defines a job history line item.",
        "properties": {
          "employment_status": {
            "$ref": "#/components/schemas/enum-value"
          },
          "end_date": {
            "type": "string",
            "description": "The end date of the job, or not specified if current.",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time"
          },
          "is_current": {
            "type": "boolean",
            "description": "Is this the current active job for the user."
          },
          "location": {
            "type": "string",
            "description": "The job location for the user."
          },
          "start_date": {
            "type": "string",
            "description": "The start date of the job.",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time"
          },
          "title": {
            "type": "string",
            "description": "The job title for the user."
          }
        },
        "title": "job-history-item"
      },
      "keyrings-create-callback-request": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code to exchange for an access token."
          },
          "state": {
            "type": "string",
            "description": "State value given to the authorization request."
          }
        },
        "required": [
          "code",
          "state"
        ],
        "title": "keyrings-create-callback-request"
      },
      "legacy-stage": {
        "type": "object",
        "description": "Describes the current stage of a work item.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Current stage name of the work item."
          }
        },
        "required": [
          "name"
        ],
        "title": "legacy-stage"
      },
      "list-mode": {
        "type": "string",
        "description": "The iteration mode to use. If \"after\", then entries after the provided\ncursor will be returned, or if no cursor is provided, then from the\nbeginning. If \"before\", then entries before the provided cursor will be\nreturned, or if no cursor is provided, then from the end. Entries will\nalways be returned in the specified sort-by order.\n",
        "enum": [
          "after",
          "before"
        ]
      },
      "metric-definition-summary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base-summary"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Human readable name of the metric."
              }
            }
          }
        ],
        "title": "metric-definition-summary"
      },
      "org-base": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base"
          },
          {
            "type": "object",
            "properties": {
              "display_name": {
                "type": "string",
                "description": "Name of the Organization."
              }
            }
          }
        ],
        "title": "org-base"
      },
      "org-base-summary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base-summary"
          },
          {
            "type": "object",
            "properties": {
              "display_name": {
                "type": "string",
                "description": "Name of the Organization."
              }
            }
          }
        ],
        "title": "org-base-summary"
      },
      "org-environment": {
        "type": "string",
        "description": "The environment of the Org. Defaults to 'production' if not specified.\n",
        "enum": [
          "production",
          "staging",
          "test"
        ]
      },
      "org-schedule-status": {
        "type": "string",
        "description": "Status determines how an item can be used. In 'draft' status an item\ncan be edited but can't be used. When 'published' the item can longer\nbe edited but can be used. 'Archived' is read-only.\n",
        "enum": [
          "archived",
          "draft",
          "published"
        ]
      },
      "org-schedule-summary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base-summary"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Human-readable name."
              },
              "status": {
                "$ref": "#/components/schemas/org-schedule-status"
              },
              "timezone": {
                "type": "string",
                "description": "Timezone in which this is defined. Only organization schedules in\nthe same timezone can be directly combined.\n"
              },
              "valid_until": {
                "type": "string",
                "description": "Derived field indicating when a valid organization schedule will\nbecome invalid. If omitted, the schedule is already invalid. A\nschedule is valid if it has a weekly schedule for all named periods\nfor all its schedule fragments, and if it has a schedule fragment\nfor the time period in question.\n",
                "example": "2023-01-01T12:00:00.000Z",
                "format": "date-time"
              }
            },
            "required": [
              "status"
            ]
          }
        ],
        "title": "org-schedule-summary"
      },
      "org-summary": {
        "type": "object",
        "discriminator": {
          "mapping": {
            "rev_org": "#/components/schemas/rev-org-summary"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/rev-org-summary"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/org-type"
          }
        },
        "required": [
          "type"
        ],
        "title": "org-summary"
      },
      "org-type": {
        "type": "string",
        "enum": [
          "rev_org"
        ]
      },
      "parent-part-filter": {
        "type": "object",
        "description": "The filter for specifying parent part.",
        "properties": {
          "level": {
            "type": "integer",
            "description": "Number of levels to fetch the part hierarchy up to.",
            "format": "int32",
            "minimum": 1
          },
          "parts": {
            "type": "array",
            "description": "Part IDs to fetch the hierarchy for.",
            "example": [
              "PROD-12345"
            ],
            "items": {
              "type": "string"
            },
            "minItems": 1
          }
        },
        "required": [
          "parts"
        ],
        "title": "parent-part-filter"
      },
      "part": {
        "type": "object",
        "discriminator": {
          "mapping": {
            "capability": "#/components/schemas/capability",
            "enhancement": "#/components/schemas/enhancement",
            "feature": "#/components/schemas/feature",
            "product": "#/components/schemas/product"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/capability"
          },
          {
            "$ref": "#/components/schemas/enhancement"
          },
          {
            "$ref": "#/components/schemas/feature"
          },
          {
            "$ref": "#/components/schemas/product"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/part-type"
          }
        },
        "required": [
          "type"
        ],
        "title": "part"
      },
      "part-base": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base"
          },
          {
            "type": "object",
            "properties": {
              "artifacts": {
                "type": "array",
                "description": "The attached artifacts.",
                "items": {
                  "$ref": "#/components/schemas/artifact-summary"
                }
              },
              "description": {
                "type": "string",
                "description": "Description of the part."
              },
              "name": {
                "type": "string",
                "description": "Name of the part."
              },
              "owned_by": {
                "type": "array",
                "description": "The users that own the part.",
                "items": {
                  "$ref": "#/components/schemas/user-summary"
                }
              },
              "tags": {
                "type": "array",
                "description": "Tags associated with the object.",
                "items": {
                  "$ref": "#/components/schemas/tag-with-value"
                }
              }
            },
            "required": [
              "name",
              "owned_by"
            ]
          }
        ],
        "title": "part-base"
      },
      "part-base-summary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base-summary"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the part."
              },
              "owned_by": {
                "type": "array",
                "description": "The users that own the part.",
                "items": {
                  "$ref": "#/components/schemas/user-summary"
                }
              }
            },
            "required": [
              "name",
              "owned_by"
            ]
          }
        ],
        "title": "part-base-summary"
      },
      "part-summary": {
        "type": "object",
        "discriminator": {
          "mapping": {
            "capability": "#/components/schemas/capability-summary",
            "enhancement": "#/components/schemas/enhancement-summary",
            "feature": "#/components/schemas/feature-summary",
            "product": "#/components/schemas/product-summary"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/capability-summary"
          },
          {
            "$ref": "#/components/schemas/enhancement-summary"
          },
          {
            "$ref": "#/components/schemas/feature-summary"
          },
          {
            "$ref": "#/components/schemas/product-summary"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/part-type"
          }
        },
        "required": [
          "type"
        ],
        "title": "part-summary"
      },
      "part-type": {
        "type": "string",
        "enum": [
          "capability",
          "enhancement",
          "feature",
          "product"
        ]
      },
      "parts-create-request": {
        "type": "object",
        "discriminator": {
          "mapping": {
            "capability": "#/components/schemas/parts-create-request-capability",
            "enhancement": "#/components/schemas/parts-create-request-enhancement",
            "feature": "#/components/schemas/parts-create-request-feature",
            "product": "#/components/schemas/parts-create-request-product"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/parts-create-request-capability"
          },
          {
            "$ref": "#/components/schemas/parts-create-request-enhancement"
          },
          {
            "$ref": "#/components/schemas/parts-create-request-feature"
          },
          {
            "$ref": "#/components/schemas/parts-create-request-product"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/part-type"
          },
          "artifacts": {
            "type": "array",
            "description": "The IDs of the artifacts.",
            "example": [
              "ARTIFACT-12345"
            ],
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "description": "Description of the part."
          },
          "name": {
            "type": "string",
            "description": "Name of the part."
          },
          "owned_by": {
            "type": "array",
            "description": "The users that own the part.",
            "example": [
              "DEVU-12345"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "owned_by",
          "type"
        ],
        "title": "parts-create-request"
      },
      "parts-create-request-capability": {
        "type": "object",
        "properties": {
          "parent_part": {
            "type": "array",
            "description": "ID of the parent product for the capability.",
            "example": [
              "PROD-12345"
            ],
            "items": {
              "type": "string"
            },
            "maxItems": 1
          }
        },
        "required": [
          "parent_part"
        ],
        "title": "parts-create-request-capability"
      },
      "parts-create-request-enhancement": {
        "type": "object",
        "properties": {
          "parent_part": {
            "type": "array",
            "description": "ID of the parent part on which the enhancement is to be created.\n",
            "example": [
              "PROD-12345"
            ],
            "items": {
              "type": "string"
            },
            "maxItems": 1
          },
          "target_close_date": {
            "type": "string",
            "description": "Target close date by which enhancement is expected to be closed.\n",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time"
          },
          "target_start_date": {
            "type": "string",
            "description": "Target start date by which enhancement is expected to be started.\nExample Date Format: 2000-11-01T01:01:01Z\n",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time"
          }
        },
        "required": [
          "parent_part"
        ],
        "title": "parts-create-request-enhancement"
      },
      "parts-create-request-feature": {
        "type": "object",
        "properties": {
          "parent_part": {
            "type": "array",
            "description": "ID of the parent capability/feature for the feature.",
            "example": [
              "PROD-12345"
            ],
            "items": {
              "type": "string"
            },
            "maxItems": 1
          }
        },
        "required": [
          "parent_part"
        ],
        "title": "parts-create-request-feature"
      },
      "parts-create-request-product": {
        "type": "object",
        "additionalProperties": false,
        "title": "parts-create-request-product"
      },
      "parts-create-response": {
        "type": "object",
        "properties": {
          "part": {
            "$ref": "#/components/schemas/part"
          }
        },
        "required": [
          "part"
        ],
        "title": "parts-create-response",
        "x-go-name": "PartsCreateResponseBody"
      },
      "parts-delete-request": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the part to delete.",
            "example": "PROD-12345"
          }
        },
        "required": [
          "id"
        ],
        "title": "parts-delete-request"
      },
      "parts-delete-response": {
        "type": "object",
        "additionalProperties": false,
        "title": "parts-delete-response",
        "x-go-name": "PartsDeleteResponseBody"
      },
      "parts-get-request": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the part to retrieve.",
            "example": "PROD-12345"
          }
        },
        "required": [
          "id"
        ],
        "title": "parts-get-request"
      },
      "parts-get-response": {
        "type": "object",
        "properties": {
          "part": {
            "$ref": "#/components/schemas/part"
          }
        },
        "required": [
          "part"
        ],
        "title": "parts-get-response",
        "x-go-name": "PartsGetResponseBody"
      },
      "parts-list-request": {
        "type": "object",
        "properties": {
          "type": {
            "type": "array",
            "description": "Filters for parts of the provided type(s).",
            "items": {
              "$ref": "#/components/schemas/part-type"
            }
          },
          "created_by": {
            "type": "array",
            "description": "Filters for parts created by any of these users.",
            "example": [
              "DEVU-12345"
            ],
            "items": {
              "type": "string"
            }
          },
          "cursor": {
            "type": "string",
            "description": "The cursor to resume iteration from. If not provided, then\niteration starts from the beginning.\n"
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of parts to return. The default is '50'.\n",
            "format": "int32"
          },
          "mode": {
            "$ref": "#/components/schemas/list-mode"
          },
          "name": {
            "type": "array",
            "description": "Filters for parts of the provided name(s).",
            "items": {
              "type": "string"
            }
          },
          "owned_by": {
            "type": "array",
            "description": "Filters for parts owned by any of these users.",
            "example": [
              "DEVU-12345"
            ],
            "items": {
              "type": "string"
            }
          },
          "parent_part": {
            "$ref": "#/components/schemas/parent-part-filter"
          }
        },
        "title": "parts-list-request"
      },
      "parts-list-response": {
        "type": "object",
        "properties": {
          "next_cursor": {
            "type": "string",
            "description": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n"
          },
          "parts": {
            "type": "array",
            "description": "The list of parts.",
            "items": {
              "$ref": "#/components/schemas/part"
            }
          },
          "prev_cursor": {
            "type": "string",
            "description": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n"
          }
        },
        "required": [
          "parts"
        ],
        "title": "parts-list-response",
        "x-go-name": "PartsListResponseBody"
      },
      "parts-update-request": {
        "type": "object",
        "discriminator": {
          "mapping": {
            "capability": "#/components/schemas/parts-update-request-capability",
            "enhancement": "#/components/schemas/parts-update-request-enhancement",
            "feature": "#/components/schemas/parts-update-request-feature",
            "none": "#/components/schemas/empty",
            "product": "#/components/schemas/parts-update-request-product"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/empty"
          },
          {
            "$ref": "#/components/schemas/parts-update-request-capability"
          },
          {
            "$ref": "#/components/schemas/parts-update-request-enhancement"
          },
          {
            "$ref": "#/components/schemas/parts-update-request-feature"
          },
          {
            "$ref": "#/components/schemas/parts-update-request-product"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/part-type"
          },
          "artifacts": {
            "$ref": "#/components/schemas/parts-update-request-artifacts"
          },
          "description": {
            "type": "string",
            "description": "The updated description of the part."
          },
          "id": {
            "type": "string",
            "description": "The ID of the part to update.",
            "example": "PROD-12345"
          },
          "name": {
            "type": "string",
            "description": "The updated name of the part."
          },
          "owned_by": {
            "$ref": "#/components/schemas/parts-update-request-owned-by"
          }
        },
        "required": [
          "id"
        ],
        "title": "parts-update-request"
      },
      "parts-update-request-artifacts": {
        "type": "object",
        "properties": {
          "set": {
            "type": "array",
            "description": "Sets the artifacts to the provided IDs.",
            "example": [
              "ARTIFACT-12345"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "title": "parts-update-request-artifacts"
      },
      "parts-update-request-capability": {
        "type": "object",
        "additionalProperties": false,
        "title": "parts-update-request-capability"
      },
      "parts-update-request-enhancement": {
        "type": "object",
        "properties": {
          "target_close_date": {
            "type": "string",
            "description": "Updates the target close date of the enhancement.",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time",
            "nullable": true
          },
          "target_start_date": {
            "type": "string",
            "description": "Updates the target start date of the enhancement. Example Date\nFormat: 2000-11-01T01:01:01Z\n",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time",
            "nullable": true
          }
        },
        "title": "parts-update-request-enhancement"
      },
      "parts-update-request-feature": {
        "type": "object",
        "additionalProperties": false,
        "title": "parts-update-request-feature"
      },
      "parts-update-request-owned-by": {
        "type": "object",
        "properties": {
          "set": {
            "type": "array",
            "description": "Sets the owner IDs to the provided user IDs. This must not be\nempty.\n",
            "example": [
              "DEVU-12345"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "title": "parts-update-request-owned-by"
      },
      "parts-update-request-product": {
        "type": "object",
        "additionalProperties": false,
        "title": "parts-update-request-product"
      },
      "parts-update-response": {
        "type": "object",
        "properties": {
          "part": {
            "$ref": "#/components/schemas/part"
          }
        },
        "required": [
          "part"
        ],
        "title": "parts-update-response",
        "x-go-name": "PartsUpdateResponseBody"
      },
      "product": {
        "allOf": [
          {
            "$ref": "#/components/schemas/part-base"
          }
        ],
        "title": "product"
      },
      "product-summary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/part-base-summary"
          }
        ],
        "title": "product-summary"
      },
      "rev-org": {
        "allOf": [
          {
            "$ref": "#/components/schemas/org-base"
          },
          {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "Description of the Rev organization."
              },
              "domain": {
                "type": "string",
                "description": "Company's domain name. Example - 'devrev.ai'."
              },
              "external_ref": {
                "type": "string",
                "description": "External ref is a unique identifier for the Rev (customer)\norganization from your primary customer system of records. If none\nis specified, a system-generated identifier will be assigned to the\norganization.\n"
              }
            }
          }
        ],
        "title": "rev-org"
      },
      "rev-org-summary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/org-base-summary"
          }
        ],
        "title": "rev-org-summary"
      },
      "rev-orgs-create-request": {
        "type": "object",
        "description": "Request object to create a new Rev organization in the Dev\norganization.\n",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the Rev organization."
          },
          "display_name": {
            "type": "string",
            "description": "Name of the Rev organization."
          },
          "domain": {
            "type": "string",
            "description": "Company's domain name. Example - 'devrev.ai'."
          },
          "environment": {
            "$ref": "#/components/schemas/org-environment"
          },
          "external_ref": {
            "type": "string",
            "description": "External ref is a custom unique identifier which is a reference to\nan unique id for this organization's data in some system of\nrecords.\n"
          },
          "tier": {
            "type": "string",
            "description": "The tier of the RevOrg."
          }
        },
        "required": [
          "display_name"
        ],
        "title": "rev-orgs-create-request"
      },
      "rev-orgs-create-response": {
        "type": "object",
        "description": "Response object for request to create a new Rev organization.\n",
        "properties": {
          "rev_org": {
            "$ref": "#/components/schemas/rev-org"
          }
        },
        "required": [
          "rev_org"
        ],
        "title": "rev-orgs-create-response",
        "x-go-name": "RevOrgsCreateResponseBody"
      },
      "rev-orgs-delete-request": {
        "type": "object",
        "description": "Request object to delete a Rev organization.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of Rev organization to delete.",
            "example": "REV-AbCdEfGh"
          }
        },
        "required": [
          "id"
        ],
        "title": "rev-orgs-delete-request"
      },
      "rev-orgs-delete-response": {
        "type": "object",
        "additionalProperties": false,
        "description": "The response to deleting a Rev organization.",
        "title": "rev-orgs-delete-response",
        "x-go-name": "RevOrgsDeleteResponseBody"
      },
      "rev-orgs-get-request": {
        "type": "object",
        "description": "Request object to get Rev organization's information.",
        "properties": {
          "account": {
            "type": "string",
            "description": "The ID of account for which default Rev organization is to be\nfetched.\n",
            "example": "ACC-12345"
          },
          "id": {
            "type": "string",
            "description": "The ID of the required Rev organization.",
            "example": "REV-AbCdEfGh"
          }
        },
        "title": "rev-orgs-get-request"
      },
      "rev-orgs-get-response": {
        "type": "object",
        "description": "The response to getting a Rev organization's information.",
        "properties": {
          "rev_org": {
            "$ref": "#/components/schemas/rev-org"
          }
        },
        "required": [
          "rev_org"
        ],
        "title": "rev-orgs-get-response",
        "x-go-name": "RevOrgsGetResponseBody"
      },
      "rev-orgs-list-request": {
        "type": "object",
        "description": "A request to get the list of Rev organizations for the authenticated\nuser's Dev organization.\n",
        "properties": {
          "created_by": {
            "type": "array",
            "description": "Filters by creator.",
            "items": {
              "type": "string"
            }
          },
          "created_date": {
            "$ref": "#/components/schemas/date-time-filter"
          },
          "cursor": {
            "type": "string",
            "description": "The cursor to resume iteration from. If not provided, then\niteration starts from the beginning.\n"
          },
          "display_name": {
            "type": "array",
            "description": "Array of display names of Rev orgs to be filtered.",
            "items": {
              "type": "string"
            }
          },
          "external_ref": {
            "type": "array",
            "description": "List of external refs to filter Rev organizations for.",
            "items": {
              "type": "string"
            }
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of Rev organizations to be retrieved per page.\n",
            "format": "int32"
          },
          "mode": {
            "$ref": "#/components/schemas/list-mode"
          },
          "modified_date": {
            "$ref": "#/components/schemas/date-time-filter"
          },
          "sort_by": {
            "type": "array",
            "description": "Fields to sort the Rev organizations by and the direction to sort\nthem.\n",
            "items": {
              "type": "string"
            }
          }
        },
        "title": "rev-orgs-list-request"
      },
      "rev-orgs-list-response": {
        "type": "object",
        "description": "The response to getting a list of Rev organizations' information.\n",
        "properties": {
          "next_cursor": {
            "type": "string",
            "description": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n"
          },
          "prev_cursor": {
            "type": "string",
            "description": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n"
          },
          "rev_orgs": {
            "type": "array",
            "description": "List with all of the Rev organizations' information.",
            "items": {
              "$ref": "#/components/schemas/rev-org"
            }
          }
        },
        "required": [
          "rev_orgs"
        ],
        "title": "rev-orgs-list-response",
        "x-go-name": "RevOrgsListResponseBody"
      },
      "rev-orgs-update-request": {
        "type": "object",
        "description": "Request object to update information of the Rev organization.\n",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the Rev organization."
          },
          "display_name": {
            "type": "string",
            "description": "Customer chosen name for the Rev organization."
          },
          "domain": {
            "type": "string",
            "description": "Company's domain name. Example - 'devrev.ai'."
          },
          "environment": {
            "$ref": "#/components/schemas/org-environment"
          },
          "external_ref": {
            "type": "string",
            "description": "External ref is a custom unique identifier which is a reference to\nan unique id for this organization's data in some system of\nrecords.\n"
          },
          "id": {
            "type": "string",
            "description": "The ID of Rev organization to update.",
            "example": "REV-AbCdEfGh"
          },
          "tier": {
            "type": "string",
            "description": "The tier of the RevOrg."
          }
        },
        "required": [
          "id"
        ],
        "title": "rev-orgs-update-request"
      },
      "rev-orgs-update-response": {
        "type": "object",
        "description": "Response object to updating Rev organization's information.",
        "properties": {
          "rev_org": {
            "$ref": "#/components/schemas/rev-org"
          }
        },
        "required": [
          "rev_org"
        ],
        "title": "rev-orgs-update-response",
        "x-go-name": "RevOrgsUpdateResponseBody"
      },
      "rev-user": {
        "allOf": [
          {
            "$ref": "#/components/schemas/user-base"
          },
          {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "Description of the Rev user."
              },
              "external_ref": {
                "type": "string",
                "description": "External ref is a mutable unique identifier for a user within the\nRev organization from your primary customer record. If none is\navailable, a good alternative is the email address/phone number\nwhich could uniquely identify the user. If none is specified, a\nsystem-generated identifier will be assigned to the user.\n"
              },
              "rev_org": {
                "$ref": "#/components/schemas/org-summary"
              }
            }
          }
        ],
        "title": "rev-user"
      },
      "rev-user-summary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/user-base-summary"
          },
          {
            "type": "object",
            "properties": {
              "external_ref": {
                "type": "string",
                "description": "External ref is a mutable unique identifier for a user within the\nRev organization from your primary customer record. If none is\navailable, a good alternative is the email address/phone number\nwhich could uniquely identify the user. If none is specified, a\nsystem-generated identifier will be assigned to the user.\n"
              },
              "rev_org": {
                "$ref": "#/components/schemas/org-summary"
              }
            }
          }
        ],
        "title": "rev-user-summary"
      },
      "set-tag-with-value": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the tag.",
            "example": "TAG-12345"
          },
          "value": {
            "type": "string",
            "description": "The value for the object's association with the tag. If specified,\nthe value must be one that's specified in the tag's allowed values.\n"
          }
        },
        "required": [
          "id"
        ],
        "title": "set-tag-with-value"
      },
      "sla-status": {
        "type": "string",
        "description": "Status determines how an item can be used. In 'draft' status an item\ncan be edited but can't be used. When 'published' the item can longer\nbe edited but can be used. 'Archived' is read-only.\n",
        "enum": [
          "archived",
          "draft",
          "published"
        ]
      },
      "sla-summary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base-summary"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Human-readable name."
              },
              "sla_type": {
                "$ref": "#/components/schemas/sla-type"
              },
              "status": {
                "$ref": "#/components/schemas/sla-status"
              }
            },
            "required": [
              "name",
              "status"
            ]
          }
        ],
        "title": "sla-summary"
      },
      "sla-summary-filter": {
        "type": "object",
        "description": "The filter for SLA summary.",
        "properties": {
          "stage": {
            "type": "array",
            "description": "Filters for records with any of the provided SLA stages.",
            "items": {
              "$ref": "#/components/schemas/sla-summary-stage"
            }
          },
          "target_time": {
            "$ref": "#/components/schemas/date-filter"
          }
        },
        "title": "sla-summary-filter"
      },
      "sla-summary-stage": {
        "type": "string",
        "description": "The stage of the SLA. This is the metric stage which is closest to\nbreach.\n",
        "enum": [
          "breached",
          "completed",
          "paused",
          "running",
          "warning"
        ]
      },
      "sla-tracker": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base"
          },
          {
            "type": "object",
            "properties": {
              "applies_to_id": {
                "type": "string",
                "description": "Details of the object on which the SLA is being tracked."
              },
              "metric_target_summaries": {
                "type": "array",
                "description": "Summary of the metrics target being tracked in the SLA tracker.\n",
                "items": {
                  "$ref": "#/components/schemas/archetype-metric-target"
                }
              },
              "sla": {
                "$ref": "#/components/schemas/sla-summary"
              },
              "sla_policy_id": {
                "type": "string",
                "description": "Details of the applicable SLA policy. Can be omitted if no sla\napplies, or if no policy of the sla applies at the moment.\n"
              },
              "stage": {
                "type": "string",
                "description": "SLA stage of the object being tracked."
              },
              "status": {
                "type": "string",
                "description": "It is an indicator of whether the SLA has ever been breached\n(missed). If not, it shows whether the SLA is completed, in\nprogress, or nil - if no policy is applied.\n"
              }
            },
            "required": [
              "metric_target_summaries"
            ]
          }
        ],
        "title": "sla-tracker"
      },
      "sla-tracker-summary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base-summary"
          }
        ],
        "title": "sla-tracker-summary"
      },
      "sla-trackers-get-request": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the SLA tracker to get."
          }
        },
        "required": [
          "id"
        ],
        "title": "sla-trackers-get-request"
      },
      "sla-trackers-get-response": {
        "type": "object",
        "properties": {
          "sla_tracker": {
            "$ref": "#/components/schemas/sla-tracker"
          }
        },
        "required": [
          "sla_tracker"
        ],
        "title": "sla-trackers-get-response",
        "x-go-name": "SlaTrackersGetResponseBody"
      },
      "sla-type": {
        "type": "string",
        "description": "Type of the SLA.",
        "enum": [
          "external",
          "internal"
        ]
      },
      "snap-widget": {
        "type": "object",
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "type": {
            "$ref": "#/components/schemas/snap-widget-type"
          }
        },
        "required": [
          "type"
        ],
        "title": "snap-widget"
      },
      "snap-widget-type": {
        "type": "string"
      },
      "stage-filter": {
        "type": "object",
        "description": "The filter for stages.",
        "properties": {
          "name": {
            "type": "array",
            "description": "Filters for records in the provided stage(s) by name.",
            "items": {
              "type": "string"
            }
          }
        },
        "title": "stage-filter"
      },
      "stage-init": {
        "type": "object",
        "description": "Sets an object's initial stage.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the stage."
          }
        },
        "title": "stage-init"
      },
      "stage-update": {
        "type": "object",
        "description": "Updates an object's stage.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The updated name of the stage, otherwise unchanged if not set.\n"
          }
        },
        "title": "stage-update"
      },
      "stage-validation-option-for-create": {
        "type": "string",
        "description": "Type of stage validation options when creating an object.",
        "enum": [
          "allow_non_start"
        ]
      },
      "stage-validation-option-for-update": {
        "type": "string",
        "description": "Type of state validation options when updating the stage of an object.\n",
        "enum": [
          "allow_invalid_transition"
        ]
      },
      "staged-info-filter": {
        "type": "object",
        "properties": {
          "is_staged": {
            "type": "boolean",
            "description": "Filters for issues that are staged."
          }
        },
        "title": "staged-info-filter"
      },
      "survey-aggregation-filter": {
        "type": "object",
        "additionalProperties": false,
        "description": "The filter for survey aggregation.",
        "title": "survey-aggregation-filter"
      },
      "survey-response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base"
          },
          {
            "type": "object",
            "properties": {
              "dispatch_id": {
                "type": "string",
                "description": "The unique ID associated with the dispatched survey."
              },
              "dispatched_channels": {
                "type": "array",
                "description": "Source channels on which the survey is sent.",
                "items": {
                  "$ref": "#/components/schemas/enum-value"
                }
              },
              "object": {
                "type": "string",
                "description": "The ID of the object for which survey is taken."
              },
              "recipient": {
                "$ref": "#/components/schemas/user-summary"
              },
              "response": {
                "type": "object",
                "description": "Response for the survey."
              },
              "response_channel": {
                "$ref": "#/components/schemas/enum-value"
              },
              "stage": {
                "$ref": "#/components/schemas/enum-value"
              },
              "survey": {
                "type": "string",
                "description": "The ID of the survey for which response is taken."
              }
            }
          }
        ],
        "title": "survey-response",
        "x-go-name": "SurveyResponseBody"
      },
      "sync-metadata-filter": {
        "type": "object",
        "properties": {
          "last_sync_in": {
            "$ref": "#/components/schemas/sync-metadata-filter-sync-in-filter"
          },
          "last_sync_out": {
            "$ref": "#/components/schemas/sync-metadata-filter-sync-out-filter"
          },
          "origin_system": {
            "type": "array",
            "description": "Filters for issues synced from this specific origin system.\n",
            "items": {
              "type": "string"
            }
          }
        },
        "title": "sync-metadata-filter"
      },
      "sync-metadata-filter-sync-in-filter": {
        "type": "object",
        "properties": {
          "status": {
            "type": "array",
            "description": "Filters for works with selected sync statuses.",
            "items": {
              "$ref": "#/components/schemas/sync-metadata-filter-sync-in-filter-status"
            }
          },
          "sync_date": {
            "$ref": "#/components/schemas/date-filter"
          },
          "sync_unit": {
            "type": "array",
            "description": "Filters for works modified with selected sync units.",
            "items": {
              "type": "string"
            }
          }
        },
        "title": "sync-metadata-filter-sync-in-filter"
      },
      "sync-metadata-filter-sync-in-filter-status": {
        "type": "string",
        "enum": [
          "failed",
          "modified",
          "staged",
          "succeeded"
        ]
      },
      "sync-metadata-filter-sync-out-filter": {
        "type": "object",
        "properties": {
          "status": {
            "type": "array",
            "description": "Filters for works with selected sync statuses.",
            "items": {
              "$ref": "#/components/schemas/sync-metadata-filter-sync-out-filter-status"
            }
          },
          "sync_date": {
            "$ref": "#/components/schemas/date-filter"
          },
          "sync_unit": {
            "type": "array",
            "description": "Filters for works modified with selected sync units.",
            "items": {
              "type": "string"
            }
          }
        },
        "title": "sync-metadata-filter-sync-out-filter"
      },
      "sync-metadata-filter-sync-out-filter-status": {
        "type": "string",
        "enum": [
          "failed",
          "succeeded"
        ]
      },
      "sys-user-summary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/user-base-summary"
          }
        ],
        "title": "sys-user-summary"
      },
      "tag": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base"
          },
          {
            "type": "object",
            "properties": {
              "allowed_values": {
                "type": "array",
                "description": "The allowed values for the tag, where a value is provided when a\ntag is associated with an object. If empty, then no value should be\nprovided when the association is made.\n",
                "items": {
                  "type": "string"
                }
              },
              "description": {
                "type": "string",
                "description": "An informative description for the tag that should provide context\non the tag's purpose and usage.\n"
              },
              "name": {
                "type": "string",
                "description": "The name of the tag, which denotes the logical concept by which all\ntagged objects will be associated. The name is guaranteed to be\nunique.\n"
              }
            },
            "required": [
              "name"
            ]
          }
        ],
        "title": "tag"
      },
      "tag-summary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base-summary"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the tag, which denotes the logical concept by which all\ntagged objects will be associated. The name is guaranteed to be\nunique.\n"
              }
            },
            "required": [
              "name"
            ]
          }
        ],
        "title": "tag-summary"
      },
      "tag-with-value": {
        "type": "object",
        "properties": {
          "tag": {
            "$ref": "#/components/schemas/tag-summary"
          },
          "value": {
            "type": "string",
            "description": "The value for the object's association with the tag."
          }
        },
        "required": [
          "tag"
        ],
        "title": "tag-with-value"
      },
      "tags-create-request": {
        "type": "object",
        "description": "The request to create a new tag.",
        "properties": {
          "allowed_values": {
            "type": "array",
            "description": "The allowed values for the tag, or empty if no values are\npermitted.\n",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "description": "The description for the tag."
          },
          "name": {
            "type": "string",
            "description": "The name for the tag, which must be unique across all tags.\n"
          }
        },
        "required": [
          "name"
        ],
        "title": "tags-create-request"
      },
      "tags-create-response": {
        "type": "object",
        "description": "The response to creating a new tag.",
        "properties": {
          "tag": {
            "$ref": "#/components/schemas/tag"
          }
        },
        "required": [
          "tag"
        ],
        "title": "tags-create-response",
        "x-go-name": "TagsCreateResponseBody"
      },
      "tags-delete-request": {
        "type": "object",
        "description": "The request to delete a tag.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the tag to delete.",
            "example": "TAG-12345"
          }
        },
        "required": [
          "id"
        ],
        "title": "tags-delete-request"
      },
      "tags-delete-response": {
        "type": "object",
        "additionalProperties": false,
        "description": "The response for deleting a tag.",
        "title": "tags-delete-response",
        "x-go-name": "TagsDeleteResponseBody"
      },
      "tags-get-request": {
        "type": "object",
        "description": "The request to get a tag's information.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The requested tag's ID.",
            "example": "TAG-12345"
          }
        },
        "required": [
          "id"
        ],
        "title": "tags-get-request"
      },
      "tags-get-response": {
        "type": "object",
        "description": "The response to getting a tag's information.",
        "properties": {
          "tag": {
            "$ref": "#/components/schemas/tag"
          }
        },
        "required": [
          "tag"
        ],
        "title": "tags-get-response",
        "x-go-name": "TagsGetResponseBody"
      },
      "tags-list-request": {
        "type": "object",
        "description": "The request to get information about a list of tags.",
        "properties": {
          "cursor": {
            "type": "string",
            "description": "The cursor to resume iteration from. If not provided, then\niteration starts from the beginning.\n"
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of tags to return. The default is '50'.\n",
            "format": "int32"
          },
          "mode": {
            "$ref": "#/components/schemas/list-mode"
          },
          "name": {
            "type": "array",
            "description": "Filters for tags with the provided names.",
            "items": {
              "type": "string"
            }
          },
          "sort_by": {
            "type": "array",
            "description": "Fields to sort tags by and the direction to sort them.",
            "items": {
              "type": "string"
            }
          }
        },
        "title": "tags-list-request"
      },
      "tags-list-response": {
        "type": "object",
        "description": "The response to listing the tags.",
        "properties": {
          "next_cursor": {
            "type": "string",
            "description": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n"
          },
          "prev_cursor": {
            "type": "string",
            "description": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n"
          },
          "tags": {
            "type": "array",
            "description": "The list of tags.",
            "items": {
              "$ref": "#/components/schemas/tag"
            }
          }
        },
        "required": [
          "tags"
        ],
        "title": "tags-list-response",
        "x-go-name": "TagsListResponseBody"
      },
      "tags-update-allowed-values": {
        "type": "object",
        "description": "Specifies an update to a tag's allowed values.",
        "properties": {
          "set": {
            "type": "array",
            "description": "Sets the allowed values for the tag.",
            "items": {
              "type": "string"
            }
          }
        },
        "title": "tags-update-allowed-values"
      },
      "tags-update-request": {
        "type": "object",
        "description": "The request to update a tag.",
        "properties": {
          "allowed_values": {
            "$ref": "#/components/schemas/tags-update-allowed-values"
          },
          "description": {
            "type": "string",
            "description": "The updated description of the tag."
          },
          "id": {
            "type": "string",
            "description": "The ID of the tag to update.",
            "example": "TAG-12345"
          },
          "name": {
            "type": "string",
            "description": "The updated name of the tag. The name must be unique across all\ntags.\n"
          }
        },
        "required": [
          "id"
        ],
        "title": "tags-update-request"
      },
      "tags-update-response": {
        "type": "object",
        "description": "The response for updating a tag.",
        "properties": {
          "tag": {
            "$ref": "#/components/schemas/tag"
          }
        },
        "required": [
          "tag"
        ],
        "title": "tags-update-response",
        "x-go-name": "TagsUpdateResponseBody"
      },
      "ticket": {
        "allOf": [
          {
            "$ref": "#/components/schemas/work-base"
          },
          {
            "type": "object",
            "properties": {
              "channels": {
                "type": "array",
                "description": "Channels of the ticket.",
                "items": {
                  "$ref": "#/components/schemas/ticket-channels"
                }
              },
              "group": {
                "$ref": "#/components/schemas/group-summary"
              },
              "needs_response": {
                "type": "boolean",
                "description": "Whether the ticket needs a response."
              },
              "rev_org": {
                "$ref": "#/components/schemas/org-summary"
              },
              "sentiment": {
                "$ref": "#/components/schemas/enum-value"
              },
              "severity": {
                "$ref": "#/components/schemas/ticket-severity"
              },
              "sla_tracker": {
                "$ref": "#/components/schemas/sla-tracker-summary"
              },
              "source_channel": {
                "type": "string",
                "description": "Source channel of the ticket."
              }
            }
          }
        ],
        "title": "ticket"
      },
      "ticket-channels": {
        "type": "string",
        "description": "Channels of the ticket.",
        "enum": [
          "email",
          "plug",
          "slack",
          "twilio",
          "twilio_sms"
        ]
      },
      "ticket-severity": {
        "type": "string",
        "description": "Severity of the ticket.",
        "enum": [
          "blocker",
          "high",
          "low",
          "medium"
        ]
      },
      "timeline-comment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/timeline-entry-base"
          },
          {
            "type": "object",
            "properties": {
              "artifacts": {
                "type": "array",
                "description": "The artifacts for the comment.",
                "items": {
                  "$ref": "#/components/schemas/artifact-summary"
                }
              },
              "body": {
                "type": "string",
                "description": "The comment's body. If the comment has been deleted, then no body\nwill appear in the response.\n"
              },
              "body_type": {
                "$ref": "#/components/schemas/timeline-comment-body-type"
              },
              "snap_kit_body": {
                "$ref": "#/components/schemas/timeline-snap-kit-body"
              },
              "snap_widget_body": {
                "type": "array",
                "description": "The snap widget body of the comment.",
                "items": {
                  "$ref": "#/components/schemas/snap-widget"
                }
              }
            }
          }
        ],
        "title": "timeline-comment"
      },
      "timeline-comment-body-type": {
        "type": "string",
        "description": "The type of the body to use for the comment.",
        "enum": [
          "snap_kit",
          "snap_widget",
          "text"
        ]
      },
      "timeline-entries-create-request": {
        "type": "object",
        "description": "The request to create a timeline entry for an object.",
        "discriminator": {
          "mapping": {
            "timeline_comment": "#/components/schemas/timeline-entries-create-request-timeline-comment"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/timeline-entries-create-request-timeline-comment"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/timeline-entries-create-request-type"
          },
          "expires_at": {
            "type": "string",
            "description": "If set, then the entry is ephemeral and will be deleted after the\nprovided time. The minimum value should be at least a minute more\nthan the current timestamp.\n",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "description": "The ID of the object to create the timeline entry for.",
            "example": "PROD-12345"
          },
          "private_to": {
            "type": "array",
            "description": "If the visibility of the entry is private, this specifies the users\nthat the entry is private to. Note the creator is always implicitly\nincluded in this list.\n",
            "example": [
              "DEVU-12345"
            ],
            "items": {
              "type": "string"
            }
          },
          "visibility": {
            "$ref": "#/components/schemas/timeline-entry-visibility"
          }
        },
        "required": [
          "object",
          "type"
        ],
        "title": "timeline-entries-create-request"
      },
      "timeline-entries-create-request-timeline-comment": {
        "type": "object",
        "properties": {
          "artifacts": {
            "type": "array",
            "description": "The IDs of the artifacts attached to the comment.",
            "example": [
              "ARTIFACT-12345"
            ],
            "items": {
              "type": "string"
            },
            "maxItems": 50
          },
          "body": {
            "type": "string",
            "description": "The comment's body."
          },
          "body_type": {
            "$ref": "#/components/schemas/timeline-comment-body-type"
          },
          "snap_kit_body": {
            "$ref": "#/components/schemas/timeline-snap-kit-body"
          }
        },
        "title": "timeline-entries-create-request-timeline-comment"
      },
      "timeline-entries-create-request-type": {
        "type": "string",
        "enum": [
          "timeline_comment"
        ]
      },
      "timeline-entries-create-response": {
        "type": "object",
        "description": "The response to creating a timeline entry for an object.",
        "properties": {
          "timeline_entry": {
            "$ref": "#/components/schemas/timeline-entry"
          }
        },
        "required": [
          "timeline_entry"
        ],
        "title": "timeline-entries-create-response",
        "x-go-name": "TimelineEntriesCreateResponseBody"
      },
      "timeline-entries-delete-request": {
        "type": "object",
        "description": "The request to delete a timeline entry from an object.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the timeline entry to delete.",
            "example": "don:core:<partition>:devo/<dev-org-id>:ticket/123:timeline_event/<timeline-event-id>"
          }
        },
        "required": [
          "id"
        ],
        "title": "timeline-entries-delete-request"
      },
      "timeline-entries-delete-response": {
        "type": "object",
        "additionalProperties": false,
        "description": "The response to deleting a timeline entry from an object.",
        "title": "timeline-entries-delete-response",
        "x-go-name": "TimelineEntriesDeleteResponseBody"
      },
      "timeline-entries-get-request": {
        "type": "object",
        "description": "The request to get a timeline entry.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the timeline entry to get.",
            "example": "don:core:<partition>:devo/<dev-org-id>:ticket/123:timeline_event/<timeline-event-id>"
          }
        },
        "required": [
          "id"
        ],
        "title": "timeline-entries-get-request"
      },
      "timeline-entries-get-response": {
        "type": "object",
        "description": "The request to getting a timeline entry.",
        "properties": {
          "timeline_entry": {
            "$ref": "#/components/schemas/timeline-entry"
          }
        },
        "required": [
          "timeline_entry"
        ],
        "title": "timeline-entries-get-response",
        "x-go-name": "TimelineEntriesGetResponseBody"
      },
      "timeline-entries-list-request": {
        "type": "object",
        "description": "The request to list timeline entries for an object.",
        "properties": {
          "cursor": {
            "type": "string",
            "description": "The cursor to resume iteration from. If not provided, then\niteration starts from the beginning.\n"
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of entries to return. If not set, then this\ndefaults to `50`.\n",
            "format": "int32"
          },
          "mode": {
            "$ref": "#/components/schemas/list-mode"
          },
          "object": {
            "type": "string",
            "description": "The ID of the object to list timeline entries for.",
            "example": "PROD-12345"
          },
          "visibility": {
            "type": "array",
            "description": "The visibility of the timeline entries to filter for. Note this is\na strict filter, such that only entries with the exact visibilities\nspecified will be returned.\n",
            "items": {
              "$ref": "#/components/schemas/timeline-entry-visibility"
            }
          }
        },
        "required": [
          "object"
        ],
        "title": "timeline-entries-list-request"
      },
      "timeline-entries-list-response": {
        "type": "object",
        "description": "The response to listing timeline entries for an object.",
        "properties": {
          "next_cursor": {
            "type": "string",
            "description": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n"
          },
          "prev_cursor": {
            "type": "string",
            "description": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n"
          },
          "timeline_entries": {
            "type": "array",
            "description": "The timeline entries for the object.",
            "items": {
              "$ref": "#/components/schemas/timeline-entry"
            }
          }
        },
        "required": [
          "timeline_entries"
        ],
        "title": "timeline-entries-list-response",
        "x-go-name": "TimelineEntriesListResponseBody"
      },
      "timeline-entries-update-request": {
        "type": "object",
        "description": "The request to update a timeline entry.",
        "discriminator": {
          "mapping": {
            "timeline_comment": "#/components/schemas/timeline-entries-update-request-timeline-comment"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/timeline-entries-update-request-timeline-comment"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/timeline-entries-update-request-type"
          },
          "id": {
            "type": "string",
            "description": "The ID of the timeline entry to update.",
            "example": "don:core:<partition>:devo/<dev-org-id>:ticket/123:timeline_event/<timeline-event-id>"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "timeline-entries-update-request"
      },
      "timeline-entries-update-request-timeline-comment": {
        "type": "object",
        "properties": {
          "artifacts": {
            "$ref": "#/components/schemas/timeline-entries-update-request-timeline-comment-artifacts"
          },
          "body": {
            "type": "string",
            "description": "The updated comment's body."
          },
          "body_type": {
            "$ref": "#/components/schemas/timeline-comment-body-type"
          },
          "snap_kit_body": {
            "$ref": "#/components/schemas/timeline-snap-kit-body"
          }
        },
        "title": "timeline-entries-update-request-timeline-comment"
      },
      "timeline-entries-update-request-timeline-comment-artifacts": {
        "type": "object",
        "properties": {
          "add": {
            "type": "array",
            "description": "Adds the provided artifacts to the comment. An artifact cannot be\nadded more than once, i.e. nothing is done if the artifact is\nalready attached. Mutually exclusive with `set`.\n",
            "example": [
              "ARTIFACT-12345"
            ],
            "items": {
              "type": "string"
            },
            "maxItems": 10
          },
          "remove": {
            "type": "array",
            "description": "Removes the provided artifacts from the comment. If an artifact is\nnot present, then it's ignored. Mututally exclusive with `set`.\n",
            "example": [
              "ARTIFACT-12345"
            ],
            "items": {
              "type": "string"
            },
            "maxItems": 10
          },
          "set": {
            "type": "array",
            "description": "Sets the field to the provided artifacts.",
            "example": [
              "ARTIFACT-12345"
            ],
            "items": {
              "type": "string"
            },
            "maxItems": 50
          }
        },
        "title": "timeline-entries-update-request-timeline-comment-artifacts"
      },
      "timeline-entries-update-request-type": {
        "type": "string",
        "enum": [
          "timeline_comment"
        ]
      },
      "timeline-entries-update-response": {
        "type": "object",
        "description": "The response to updating a timeline entry.",
        "properties": {
          "timeline_entry": {
            "$ref": "#/components/schemas/timeline-entry"
          }
        },
        "required": [
          "timeline_entry"
        ],
        "title": "timeline-entries-update-response",
        "x-go-name": "TimelineEntriesUpdateResponseBody"
      },
      "timeline-entry": {
        "type": "object",
        "discriminator": {
          "mapping": {
            "timeline_comment": "#/components/schemas/timeline-comment"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/timeline-comment"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/timeline-entry-type"
          }
        },
        "required": [
          "type"
        ],
        "title": "timeline-entry"
      },
      "timeline-entry-base": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base"
          },
          {
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "description": "The object that the Timeline entry belongs to."
              },
              "object_display_id": {
                "type": "string",
                "description": "The display ID of the object that the Timeline entry belongs to.\n"
              },
              "object_type": {
                "$ref": "#/components/schemas/timeline-entry-object-type"
              },
              "visibility": {
                "$ref": "#/components/schemas/timeline-entry-visibility"
              }
            },
            "required": [
              "object",
              "object_display_id"
            ]
          }
        ],
        "title": "timeline-entry-base"
      },
      "timeline-entry-object-type": {
        "type": "string",
        "description": "The type of object that the Timeline entry belongs to.",
        "enum": [
          "capability",
          "conversation",
          "enhancement",
          "feature",
          "issue",
          "product",
          "rev_org",
          "rev_user",
          "ticket",
          "timeline_comment"
        ]
      },
      "timeline-entry-type": {
        "type": "string",
        "enum": [
          "timeline_comment"
        ]
      },
      "timeline-entry-visibility": {
        "type": "string",
        "description": "The visibility of the entry. If 'private', then the entry is only\nvisible to the creator, 'internal' is visible with the Dev\norganization, 'external' is visible to the Dev organzation and Rev\nusers, and 'public' is visible to all. If not set, then the default\nvisibility is 'external'.\n",
        "enum": [
          "external",
          "internal",
          "private",
          "public"
        ]
      },
      "timeline-snap-kit-body": {
        "type": "object",
        "description": "Snap Kit Body of the comment.",
        "properties": {
          "body": {
            "type": "object",
            "description": "The JSON body of the SnapKit."
          },
          "snap_in_action_name": {
            "type": "string",
            "description": "The name of an action defined in the SnapIn. The combination of\nsnap_in_id and snap_in_action_name uniquely identifies the\ninteraction object which is to be called when actions on a snapkit\nelement is taken.\n"
          },
          "snap_in_id": {
            "type": "string",
            "description": "ID of the snap-in which created the SnapKit."
          }
        },
        "title": "timeline-snap-kit-body"
      },
      "user-base": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base"
          },
          {
            "type": "object",
            "properties": {
              "display_name": {
                "type": "string",
                "description": "The user's display name. The name is non-unique and mutable.\n"
              },
              "display_picture": {
                "$ref": "#/components/schemas/artifact-summary"
              },
              "email": {
                "type": "string",
                "description": "Email address of the user."
              },
              "full_name": {
                "type": "string",
                "description": "Full name of the user."
              },
              "phone_numbers": {
                "type": "array",
                "description": "Phone numbers of the user.",
                "items": {
                  "type": "string"
                }
              },
              "state": {
                "$ref": "#/components/schemas/user-state"
              }
            }
          }
        ],
        "title": "user-base"
      },
      "user-base-summary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base-summary"
          },
          {
            "type": "object",
            "properties": {
              "display_name": {
                "type": "string",
                "description": "The user's display name. The name is non-unique and mutable.\n"
              },
              "display_picture": {
                "$ref": "#/components/schemas/artifact-summary"
              },
              "email": {
                "type": "string",
                "description": "Email address of the user."
              },
              "full_name": {
                "type": "string",
                "description": "Full name of the user."
              },
              "state": {
                "$ref": "#/components/schemas/user-state"
              }
            }
          }
        ],
        "title": "user-base-summary"
      },
      "user-skill": {
        "type": "object",
        "description": "Skill associated with the user.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the skill."
          }
        },
        "title": "user-skill"
      },
      "user-state": {
        "type": "string",
        "description": "State of the user.",
        "enum": [
          "active",
          "deactivated",
          "deleted",
          "locked",
          "shadow",
          "unassigned"
        ]
      },
      "user-summary": {
        "type": "object",
        "discriminator": {
          "mapping": {
            "dev_user": "#/components/schemas/dev-user-summary",
            "rev_user": "#/components/schemas/rev-user-summary",
            "sys_user": "#/components/schemas/sys-user-summary"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/dev-user-summary"
          },
          {
            "$ref": "#/components/schemas/rev-user-summary"
          },
          {
            "$ref": "#/components/schemas/sys-user-summary"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/user-type"
          }
        },
        "required": [
          "type"
        ],
        "title": "user-summary"
      },
      "user-type": {
        "type": "string",
        "enum": [
          "dev_user",
          "rev_user",
          "sys_user"
        ]
      },
      "vista-group-item-state": {
        "type": "string",
        "description": "Defines the state of the group item.",
        "enum": [
          "active",
          "completed",
          "planned"
        ]
      },
      "vista-group-item-summary": {
        "type": "object",
        "description": "Vista group item.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/vista-group-item-type"
          },
          "end_date": {
            "type": "string",
            "description": "Timestamp when the vista ends.",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "ID of the group item in don v2 format."
          },
          "name": {
            "type": "string",
            "description": "Name of the group."
          },
          "start_date": {
            "type": "string",
            "description": "Timestamp when the vista starts.",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time"
          },
          "state": {
            "$ref": "#/components/schemas/vista-group-item-state"
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ],
        "title": "vista-group-item-summary"
      },
      "vista-group-item-type": {
        "type": "string",
        "description": "Type of the group object.",
        "enum": [
          "curated",
          "dynamic"
        ]
      },
      "webhook": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base"
          },
          {
            "type": "object",
            "properties": {
              "event_types": {
                "type": "array",
                "description": "The event types that the webhook will receive.",
                "items": {
                  "$ref": "#/components/schemas/webhook-event-type"
                }
              },
              "secret": {
                "type": "string",
                "description": "The secret to use for verifying webhook events.",
                "format": "byte"
              },
              "status": {
                "$ref": "#/components/schemas/webhook-status"
              },
              "url": {
                "type": "string",
                "description": "The URL of the webhook endpoint."
              }
            },
            "required": [
              "secret",
              "status",
              "url"
            ]
          }
        ],
        "title": "webhook"
      },
      "webhook-event-request": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/webhook-event-type"
          },
          "account_created": {
            "$ref": "#/components/schemas/event-account-created"
          },
          "account_deleted": {
            "$ref": "#/components/schemas/event-account-deleted"
          },
          "account_updated": {
            "$ref": "#/components/schemas/event-account-updated"
          },
          "conversation_created": {
            "$ref": "#/components/schemas/event-conversation-created"
          },
          "conversation_deleted": {
            "$ref": "#/components/schemas/event-conversation-deleted"
          },
          "conversation_updated": {
            "$ref": "#/components/schemas/event-conversation-updated"
          },
          "dev_user_created": {
            "$ref": "#/components/schemas/event-dev-user-created"
          },
          "dev_user_deleted": {
            "$ref": "#/components/schemas/event-dev-user-deleted"
          },
          "dev_user_updated": {
            "$ref": "#/components/schemas/event-dev-user-updated"
          },
          "group_created": {
            "$ref": "#/components/schemas/event-group-created"
          },
          "group_deleted": {
            "$ref": "#/components/schemas/event-group-deleted"
          },
          "group_member_added": {
            "$ref": "#/components/schemas/event-group-member-added"
          },
          "group_member_removed": {
            "$ref": "#/components/schemas/event-group-member-removed"
          },
          "group_updated": {
            "$ref": "#/components/schemas/event-group-updated"
          },
          "id": {
            "type": "string",
            "description": "The event's ID."
          },
          "part_created": {
            "$ref": "#/components/schemas/event-part-created"
          },
          "part_deleted": {
            "$ref": "#/components/schemas/event-part-deleted"
          },
          "part_updated": {
            "$ref": "#/components/schemas/event-part-updated"
          },
          "rev_org_created": {
            "$ref": "#/components/schemas/event-rev-org-created"
          },
          "rev_org_deleted": {
            "$ref": "#/components/schemas/event-rev-org-deleted"
          },
          "rev_org_updated": {
            "$ref": "#/components/schemas/event-rev-org-updated"
          },
          "rev_user_created": {
            "$ref": "#/components/schemas/event-rev-user-created"
          },
          "rev_user_deleted": {
            "$ref": "#/components/schemas/event-rev-user-deleted"
          },
          "rev_user_updated": {
            "$ref": "#/components/schemas/event-rev-user-updated"
          },
          "sla_tracker_created": {
            "$ref": "#/components/schemas/event-sla-tracker-created"
          },
          "sla_tracker_deleted": {
            "$ref": "#/components/schemas/event-sla-tracker-deleted"
          },
          "sla_tracker_updated": {
            "$ref": "#/components/schemas/event-sla-tracker-updated"
          },
          "survey_response_created": {
            "$ref": "#/components/schemas/event-survey-response-created"
          },
          "survey_response_deleted": {
            "$ref": "#/components/schemas/event-survey-response-deleted"
          },
          "survey_response_updated": {
            "$ref": "#/components/schemas/event-survey-response-updated"
          },
          "tag_created": {
            "$ref": "#/components/schemas/event-tag-created"
          },
          "tag_deleted": {
            "$ref": "#/components/schemas/event-tag-deleted"
          },
          "tag_updated": {
            "$ref": "#/components/schemas/event-tag-updated"
          },
          "timeline_entry_created": {
            "$ref": "#/components/schemas/event-timeline-entry-created"
          },
          "timeline_entry_deleted": {
            "$ref": "#/components/schemas/event-timeline-entry-deleted"
          },
          "timeline_entry_updated": {
            "$ref": "#/components/schemas/event-timeline-entry-updated"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp of the webhook's invocation for the event. Note this\nshould be used to protect against replay attacks, where the event\nshould only be processed if the timestamp isn't stale by several\nseconds.\n",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time"
          },
          "verify": {
            "$ref": "#/components/schemas/webhook-event-verify"
          },
          "webhook_created": {
            "$ref": "#/components/schemas/event-webhook-created"
          },
          "webhook_deleted": {
            "$ref": "#/components/schemas/event-webhook-deleted"
          },
          "webhook_id": {
            "type": "string",
            "description": "ID of the webhook for the event.",
            "example": "don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>"
          },
          "webhook_updated": {
            "$ref": "#/components/schemas/event-webhook-updated"
          },
          "work_created": {
            "$ref": "#/components/schemas/event-work-created"
          },
          "work_deleted": {
            "$ref": "#/components/schemas/event-work-deleted"
          },
          "work_updated": {
            "$ref": "#/components/schemas/event-work-updated"
          }
        },
        "required": [
          "id",
          "webhook_id"
        ],
        "title": "webhook-event-request"
      },
      "webhook-event-response": {
        "type": "object",
        "properties": {
          "challenge": {
            "type": "string",
            "description": "The challenge from the \"verify\" request, otherwise this should not\nbe set for other request types.\n",
            "format": "byte"
          }
        },
        "title": "webhook-event-response",
        "x-go-name": "WebhookEventResponseBody"
      },
      "webhook-event-type": {
        "type": "string",
        "description": "The event types that the webhook will receive.",
        "enum": [
          "account_created",
          "account_deleted",
          "account_updated",
          "conversation_created",
          "conversation_deleted",
          "conversation_updated",
          "dev_user_created",
          "dev_user_deleted",
          "dev_user_updated",
          "group_created",
          "group_deleted",
          "group_member_added",
          "group_member_removed",
          "group_updated",
          "part_created",
          "part_deleted",
          "part_updated",
          "rev_org_created",
          "rev_org_deleted",
          "rev_org_updated",
          "rev_user_created",
          "rev_user_deleted",
          "rev_user_updated",
          "sla_tracker_created",
          "sla_tracker_deleted",
          "sla_tracker_updated",
          "tag_created",
          "tag_deleted",
          "tag_updated",
          "timeline_entry_created",
          "timeline_entry_deleted",
          "timeline_entry_updated",
          "verify",
          "webhook_created",
          "webhook_deleted",
          "webhook_updated",
          "work_created",
          "work_deleted",
          "work_updated"
        ]
      },
      "webhook-event-verify": {
        "type": "object",
        "properties": {
          "challenge": {
            "type": "string",
            "description": "The challenge that must be echoed in the response.",
            "format": "byte"
          }
        },
        "required": [
          "challenge"
        ],
        "title": "webhook-event-verify"
      },
      "webhook-status": {
        "type": "string",
        "description": "The status of the webhook.",
        "enum": [
          "active",
          "inactive",
          "unverified"
        ]
      },
      "webhooks-create-request": {
        "type": "object",
        "description": "The request to create a new webhook.",
        "properties": {
          "event_types": {
            "type": "array",
            "description": "The event types that the webhook endpoint will receive.",
            "items": {
              "$ref": "#/components/schemas/webhook-event-type"
            }
          },
          "secret": {
            "type": "string",
            "description": "The secret to use when verifying webhook events. If provided, the\nsecret must be between 8 and 32 bytes (inclusive). If not set, a\nsecret will be automatically generated and provided in the\nresponse.\n",
            "format": "byte"
          },
          "url": {
            "type": "string",
            "description": "The URL of the webhook endpoint."
          }
        },
        "required": [
          "url"
        ],
        "title": "webhooks-create-request"
      },
      "webhooks-create-response": {
        "type": "object",
        "description": "The response to creating a new webhook.",
        "properties": {
          "webhook": {
            "$ref": "#/components/schemas/webhook"
          }
        },
        "required": [
          "webhook"
        ],
        "title": "webhooks-create-response",
        "x-go-name": "WebhooksCreateResponseBody"
      },
      "webhooks-delete-request": {
        "type": "object",
        "description": "The request to delete a webhook.",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID for the webhook.",
            "example": "don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>"
          }
        },
        "required": [
          "id"
        ],
        "title": "webhooks-delete-request"
      },
      "webhooks-delete-response": {
        "type": "object",
        "additionalProperties": false,
        "description": "The response to deleting the webhook.",
        "title": "webhooks-delete-response",
        "x-go-name": "WebhooksDeleteResponseBody"
      },
      "webhooks-get-request": {
        "type": "object",
        "description": "The request to get a webhook's information.",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID for the webhook.",
            "example": "don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>"
          }
        },
        "required": [
          "id"
        ],
        "title": "webhooks-get-request"
      },
      "webhooks-get-response": {
        "type": "object",
        "description": "The response to getting the information for the webhook.",
        "properties": {
          "webhook": {
            "$ref": "#/components/schemas/webhook"
          }
        },
        "required": [
          "webhook"
        ],
        "title": "webhooks-get-response",
        "x-go-name": "WebhooksGetResponseBody"
      },
      "webhooks-list-request": {
        "type": "object",
        "additionalProperties": false,
        "description": "The request to list the webhooks.",
        "title": "webhooks-list-request"
      },
      "webhooks-list-response": {
        "type": "object",
        "description": "The response to listing the webhooks.",
        "properties": {
          "webhooks": {
            "type": "array",
            "description": "The list of webhooks.",
            "items": {
              "$ref": "#/components/schemas/webhook"
            }
          }
        },
        "required": [
          "webhooks"
        ],
        "title": "webhooks-list-response",
        "x-go-name": "WebhooksListResponseBody"
      },
      "webhooks-update-action": {
        "type": "string",
        "description": "The action to update the webhook's status.",
        "enum": [
          "activate",
          "deactivate"
        ]
      },
      "webhooks-update-request": {
        "type": "object",
        "description": "The request to update a webhook.",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/webhooks-update-action"
          },
          "event_types": {
            "$ref": "#/components/schemas/webhooks-update-request-event-types"
          },
          "id": {
            "type": "string",
            "description": "ID for the webhook.",
            "example": "don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>"
          },
          "secret": {
            "type": "string",
            "description": "If provided, updates the secret that's used when verifying webhook\nevents, which must be between 8 and 32 bytes (inclusive). Otherwise\nif empty, then a new secret is generated. If the webhook is active,\nthen its status will transition to the 'unverified' state and it\nwon't receive any object events until successfully verified.\n",
            "format": "byte"
          },
          "url": {
            "type": "string",
            "description": "The webhook's updated URL. If the webhook is active, then the\nwebhook's status will transition to the 'unverified' state and it\nwon't receive any object events until successfully verified.\n"
          }
        },
        "required": [
          "id"
        ],
        "title": "webhooks-update-request"
      },
      "webhooks-update-request-event-types": {
        "type": "object",
        "properties": {
          "add": {
            "type": "array",
            "description": "The event types to add. If a provided event type is already set for\nthe webhook, then nothing is done. Note this is mutually exclusive\nwith 'set'.\n",
            "items": {
              "$ref": "#/components/schemas/webhook-event-type"
            }
          },
          "remove": {
            "type": "array",
            "description": "The event types to remove. If a provided event type isn't set for\nthe webhook, then nothing is done. Note this is mutually exclusive\nwith 'set'.\n",
            "items": {
              "$ref": "#/components/schemas/webhook-event-type"
            }
          },
          "set": {
            "type": "array",
            "description": "The updated event types, which will replace the webhook's current\nevent types. Note this is mutually exclusive with 'add' and\n'remove'.\n",
            "items": {
              "$ref": "#/components/schemas/webhook-event-type"
            }
          }
        },
        "title": "webhooks-update-request-event-types"
      },
      "webhooks-update-response": {
        "type": "object",
        "description": "The response to updating the webhook.",
        "properties": {
          "webhook": {
            "$ref": "#/components/schemas/webhook"
          }
        },
        "required": [
          "webhook"
        ],
        "title": "webhooks-update-response",
        "x-go-name": "WebhooksUpdateResponseBody"
      },
      "work": {
        "type": "object",
        "discriminator": {
          "mapping": {
            "issue": "#/components/schemas/issue",
            "ticket": "#/components/schemas/ticket"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/issue"
          },
          {
            "$ref": "#/components/schemas/ticket"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/work-type"
          }
        },
        "required": [
          "type"
        ],
        "title": "work"
      },
      "work-base": {
        "allOf": [
          {
            "$ref": "#/components/schemas/atom-base"
          },
          {
            "type": "object",
            "properties": {
              "applies_to_part": {
                "$ref": "#/components/schemas/part-summary"
              },
              "artifacts": {
                "type": "array",
                "description": "The artifacts attached to the work item.",
                "items": {
                  "$ref": "#/components/schemas/artifact-summary"
                }
              },
              "body": {
                "type": "string",
                "description": "Body of the work object."
              },
              "owned_by": {
                "type": "array",
                "description": "The users that own the work.",
                "items": {
                  "$ref": "#/components/schemas/user-summary"
                }
              },
              "reported_by": {
                "type": "array",
                "description": "Users that reported the work.",
                "items": {
                  "$ref": "#/components/schemas/user-summary"
                }
              },
              "stage": {
                "$ref": "#/components/schemas/legacy-stage"
              },
              "tags": {
                "type": "array",
                "description": "Tags associated with the object.",
                "items": {
                  "$ref": "#/components/schemas/tag-with-value"
                }
              },
              "target_close_date": {
                "type": "string",
                "description": "Timestamp when the work is expected to be complete.",
                "example": "2023-01-01T12:00:00.000Z",
                "format": "date-time"
              },
              "title": {
                "type": "string",
                "description": "Title of the work object."
              }
            },
            "required": [
              "owned_by",
              "title"
            ]
          }
        ],
        "title": "work-base"
      },
      "work-type": {
        "type": "string",
        "enum": [
          "issue",
          "ticket"
        ]
      },
      "works-create-request": {
        "type": "object",
        "discriminator": {
          "mapping": {
            "issue": "#/components/schemas/works-create-request-issue",
            "ticket": "#/components/schemas/works-create-request-ticket"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/works-create-request-issue"
          },
          {
            "$ref": "#/components/schemas/works-create-request-ticket"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/work-type"
          },
          "applies_to_part": {
            "type": "string",
            "description": "The [part](https://devrev.ai/docs/product/parts) that the work\napplies to. Specifying a part is required when creating tickets and\nissues.\n",
            "example": "PROD-12345"
          },
          "artifacts": {
            "type": "array",
            "description": "The IDs of the artifacts to associate with the work item.\n",
            "example": [
              "ARTIFACT-12345"
            ],
            "items": {
              "type": "string"
            }
          },
          "body": {
            "type": "string",
            "description": "Body of the work object."
          },
          "owned_by": {
            "type": "array",
            "description": "The users that own the work.",
            "example": [
              "DEVU-12345"
            ],
            "items": {
              "type": "string"
            }
          },
          "reported_by": {
            "type": "array",
            "description": "The users that reported the work.",
            "example": [
              "DEVU-12345"
            ],
            "items": {
              "type": "string"
            }
          },
          "stage": {
            "$ref": "#/components/schemas/stage-init"
          },
          "stage_validation_options": {
            "type": "array",
            "description": "The type of stage validations options when creating a work item.\n",
            "items": {
              "$ref": "#/components/schemas/stage-validation-option-for-create"
            }
          },
          "tags": {
            "type": "array",
            "description": "Tags associated with the work item.",
            "items": {
              "$ref": "#/components/schemas/set-tag-with-value"
            }
          },
          "target_close_date": {
            "type": "string",
            "description": "Timestamp for when the work is expected to be complete.",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time"
          },
          "title": {
            "type": "string",
            "description": "Title of the work object."
          }
        },
        "required": [
          "applies_to_part",
          "owned_by",
          "title",
          "type"
        ],
        "title": "works-create-request"
      },
      "works-create-request-issue": {
        "type": "object",
        "properties": {
          "developed_with": {
            "type": "array",
            "description": "The IDs of the parts associated with issue.",
            "example": [
              "PROD-12345"
            ],
            "items": {
              "type": "string"
            },
            "maxItems": 8
          },
          "priority": {
            "$ref": "#/components/schemas/issue-priority"
          },
          "priority_v2": {
            "type": "integer",
            "description": "Priority enum id of the work based upon impact and criticality.\n",
            "format": "int64"
          },
          "sprint": {
            "type": "string",
            "description": "The sprint that the issue belongs to."
          },
          "target_start_date": {
            "type": "string",
            "description": "Timestamp for when the work is expected to start.",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time"
          }
        },
        "title": "works-create-request-issue"
      },
      "works-create-request-ticket": {
        "type": "object",
        "properties": {
          "channels": {
            "type": "array",
            "description": "Channels of the ticket.",
            "items": {
              "$ref": "#/components/schemas/ticket-channels"
            }
          },
          "group": {
            "type": "string",
            "description": "The group that the ticket is associated with."
          },
          "is_spam": {
            "type": "boolean",
            "description": "Whether the ticket is spam."
          },
          "needs_response": {
            "type": "boolean",
            "description": "Whether the ticket needs a response."
          },
          "rev_org": {
            "type": "string",
            "description": "The Rev organization that the ticket is associated with.",
            "example": "REV-AbCdEfGh"
          },
          "severity": {
            "$ref": "#/components/schemas/ticket-severity"
          },
          "source_channel": {
            "type": "string",
            "description": "The source channel of the ticket."
          }
        },
        "title": "works-create-request-ticket"
      },
      "works-create-response": {
        "type": "object",
        "properties": {
          "work": {
            "$ref": "#/components/schemas/work"
          }
        },
        "required": [
          "work"
        ],
        "title": "works-create-response",
        "x-go-name": "WorksCreateResponseBody"
      },
      "works-delete-request": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The work's ID.",
            "example": "ISS-12345"
          }
        },
        "required": [
          "id"
        ],
        "title": "works-delete-request"
      },
      "works-delete-response": {
        "type": "object",
        "additionalProperties": false,
        "title": "works-delete-response",
        "x-go-name": "WorksDeleteResponseBody"
      },
      "works-export-request": {
        "type": "object",
        "properties": {
          "type": {
            "type": "array",
            "description": "Filters for work of the provided types.",
            "items": {
              "$ref": "#/components/schemas/work-type"
            }
          },
          "actual_close_date": {
            "$ref": "#/components/schemas/date-filter"
          },
          "applies_to_part": {
            "type": "array",
            "description": "Filters for work belonging to any of the provided parts.",
            "example": [
              "PROD-12345"
            ],
            "items": {
              "type": "string"
            }
          },
          "created_by": {
            "type": "array",
            "description": "Filters for work created by any of these users.",
            "example": [
              "DEVU-12345"
            ],
            "items": {
              "type": "string"
            }
          },
          "created_date": {
            "$ref": "#/components/schemas/date-filter"
          },
          "first": {
            "type": "integer",
            "description": "The number of work items to return. The default is '50', the\nmaximum is '5000'.\n",
            "format": "int32"
          },
          "issue": {
            "$ref": "#/components/schemas/works-filter-issue"
          },
          "modified_date": {
            "$ref": "#/components/schemas/date-filter"
          },
          "owned_by": {
            "type": "array",
            "description": "Filters for work owned by any of these users.",
            "example": [
              "DEVU-12345"
            ],
            "items": {
              "type": "string"
            }
          },
          "reported_by": {
            "type": "array",
            "description": "Filters for work reported by any of these users.",
            "example": [
              "DEVU-12345"
            ],
            "items": {
              "type": "string"
            }
          },
          "stage": {
            "$ref": "#/components/schemas/stage-filter"
          },
          "staged_info": {
            "$ref": "#/components/schemas/staged-info-filter"
          },
          "sync_metadata": {
            "$ref": "#/components/schemas/sync-metadata-filter"
          },
          "tags": {
            "type": "array",
            "description": "Filters for work with any of the provided tags.",
            "example": [
              "TAG-12345"
            ],
            "items": {
              "type": "string"
            }
          },
          "target_close_date": {
            "$ref": "#/components/schemas/date-filter"
          },
          "ticket": {
            "$ref": "#/components/schemas/works-filter-ticket"
          }
        },
        "title": "works-export-request"
      },
      "works-export-response": {
        "type": "object",
        "properties": {
          "works": {
            "type": "array",
            "description": "The resulting collection of work items.",
            "items": {
              "$ref": "#/components/schemas/work"
            }
          }
        },
        "required": [
          "works"
        ],
        "title": "works-export-response",
        "x-go-name": "WorksExportResponseBody"
      },
      "works-filter-issue": {
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "description": "Filters for issues with any of the provided Accounts.",
            "example": [
              "ACC-12345"
            ],
            "items": {
              "type": "string"
            }
          },
          "actual_start_date": {
            "$ref": "#/components/schemas/date-filter"
          },
          "priority": {
            "type": "array",
            "description": "Filters for issues with any of the provided priorities.",
            "items": {
              "$ref": "#/components/schemas/issue-priority"
            }
          },
          "priority_v2": {
            "type": "array",
            "description": "Filters for issues with any of the provided priority enum ids.\n",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "rev_orgs": {
            "type": "array",
            "description": "Filters for issues with any of the provided Rev organizations.\n",
            "example": [
              "REV-AbCdEfGh"
            ],
            "items": {
              "type": "string"
            }
          },
          "sla_summary": {
            "$ref": "#/components/schemas/sla-summary-filter"
          },
          "sprint": {
            "type": "array",
            "description": "Filters for issues with any of the sprint.",
            "items": {
              "type": "string"
            }
          },
          "target_start_date": {
            "$ref": "#/components/schemas/date-filter"
          }
        },
        "title": "works-filter-issue"
      },
      "works-filter-ticket": {
        "type": "object",
        "properties": {
          "channels": {
            "type": "array",
            "description": "Filters for tickets with any of the provided channels.",
            "items": {
              "$ref": "#/components/schemas/ticket-channels"
            }
          },
          "group": {
            "type": "array",
            "description": "Filters for tickets belonging to specific groups.",
            "items": {
              "type": "string"
            }
          },
          "is_spam": {
            "type": "boolean",
            "description": "Filters for tickets that are spam."
          },
          "needs_response": {
            "type": "boolean",
            "description": "Filters for tickets that need response."
          },
          "rev_org": {
            "type": "array",
            "description": "Filters for tickets that are associated with any of the provided\nRev organizations.\n",
            "example": [
              "REV-AbCdEfGh"
            ],
            "items": {
              "type": "string"
            }
          },
          "severity": {
            "type": "array",
            "description": "Filters for tickets with any of the provided severities.",
            "items": {
              "$ref": "#/components/schemas/ticket-severity"
            }
          },
          "sla_summary": {
            "$ref": "#/components/schemas/sla-summary-filter"
          },
          "source_channel": {
            "type": "array",
            "description": "Filters for tickets with any of the provided source channels.\n",
            "items": {
              "type": "string"
            }
          },
          "surveys": {
            "$ref": "#/components/schemas/survey-aggregation-filter"
          }
        },
        "title": "works-filter-ticket"
      },
      "works-get-request": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The work's ID.",
            "example": "ISS-12345"
          }
        },
        "required": [
          "id"
        ],
        "title": "works-get-request"
      },
      "works-get-response": {
        "type": "object",
        "properties": {
          "work": {
            "$ref": "#/components/schemas/work"
          }
        },
        "required": [
          "work"
        ],
        "title": "works-get-response",
        "x-go-name": "WorksGetResponseBody"
      },
      "works-list-request": {
        "type": "object",
        "properties": {
          "type": {
            "type": "array",
            "description": "Filters for work of the provided types.",
            "items": {
              "$ref": "#/components/schemas/work-type"
            }
          },
          "actual_close_date": {
            "$ref": "#/components/schemas/date-filter"
          },
          "applies_to_part": {
            "type": "array",
            "description": "Filters for work belonging to any of the provided parts.",
            "example": [
              "PROD-12345"
            ],
            "items": {
              "type": "string"
            }
          },
          "created_by": {
            "type": "array",
            "description": "Filters for work created by any of these users.",
            "example": [
              "DEVU-12345"
            ],
            "items": {
              "type": "string"
            }
          },
          "created_date": {
            "$ref": "#/components/schemas/date-filter"
          },
          "cursor": {
            "type": "string",
            "description": "The cursor to resume iteration from. If not provided, then\niteration starts from the beginning.\n"
          },
          "issue": {
            "$ref": "#/components/schemas/works-filter-issue"
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of works to return. The default is '50'.\n",
            "format": "int32"
          },
          "mode": {
            "$ref": "#/components/schemas/list-mode"
          },
          "modified_date": {
            "$ref": "#/components/schemas/date-filter"
          },
          "owned_by": {
            "type": "array",
            "description": "Filters for work owned by any of these users.",
            "example": [
              "DEVU-12345"
            ],
            "items": {
              "type": "string"
            }
          },
          "reported_by": {
            "type": "array",
            "description": "Filters for work reported by any of these users.",
            "example": [
              "DEVU-12345"
            ],
            "items": {
              "type": "string"
            }
          },
          "stage": {
            "$ref": "#/components/schemas/stage-filter"
          },
          "staged_info": {
            "$ref": "#/components/schemas/staged-info-filter"
          },
          "sync_metadata": {
            "$ref": "#/components/schemas/sync-metadata-filter"
          },
          "tags": {
            "type": "array",
            "description": "Filters for work with any of the provided tags.",
            "example": [
              "TAG-12345"
            ],
            "items": {
              "type": "string"
            }
          },
          "target_close_date": {
            "$ref": "#/components/schemas/date-filter"
          },
          "ticket": {
            "$ref": "#/components/schemas/works-filter-ticket"
          }
        },
        "title": "works-list-request"
      },
      "works-list-response": {
        "type": "object",
        "properties": {
          "next_cursor": {
            "type": "string",
            "description": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n"
          },
          "prev_cursor": {
            "type": "string",
            "description": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n"
          },
          "works": {
            "type": "array",
            "description": "The list of works.",
            "items": {
              "$ref": "#/components/schemas/work"
            }
          }
        },
        "required": [
          "works"
        ],
        "title": "works-list-response",
        "x-go-name": "WorksListResponseBody"
      },
      "works-update-request": {
        "type": "object",
        "discriminator": {
          "mapping": {
            "issue": "#/components/schemas/works-update-request-issue",
            "none": "#/components/schemas/empty",
            "ticket": "#/components/schemas/works-update-request-ticket"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/empty"
          },
          {
            "$ref": "#/components/schemas/works-update-request-issue"
          },
          {
            "$ref": "#/components/schemas/works-update-request-ticket"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/work-type"
          },
          "applies_to_part": {
            "type": "string",
            "description": "Updates the part that the work item applies to.",
            "example": "PROD-12345"
          },
          "artifacts": {
            "$ref": "#/components/schemas/works-update-request-artifacts"
          },
          "body": {
            "type": "string",
            "description": "Updated body of the work object, or unchanged if not provided.\n"
          },
          "id": {
            "type": "string",
            "description": "The work's ID.",
            "example": "ISS-12345"
          },
          "owned_by": {
            "$ref": "#/components/schemas/works-update-request-owned-by"
          },
          "reported_by": {
            "$ref": "#/components/schemas/works-update-request-reported-by"
          },
          "stage": {
            "$ref": "#/components/schemas/stage-update"
          },
          "stage_validation_options": {
            "type": "array",
            "description": "The type of stage validations options when updating the stage of an\nobject.\n",
            "items": {
              "$ref": "#/components/schemas/stage-validation-option-for-update"
            }
          },
          "staged_info": {
            "$ref": "#/components/schemas/works-update-request-staged-info-staged-info-update"
          },
          "tags": {
            "$ref": "#/components/schemas/works-update-request-tags"
          },
          "target_close_date": {
            "type": "string",
            "description": "Updates the timestamp for when the work is expected to be complete.\n",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Updated title of the work object, or unchanged if not provided.\n"
          }
        },
        "required": [
          "id"
        ],
        "title": "works-update-request"
      },
      "works-update-request-artifacts": {
        "type": "object",
        "properties": {
          "add": {
            "type": "array",
            "description": "Adds the provided artifacts (if not already present) to the field.\n",
            "example": [
              "ARTIFACT-12345"
            ],
            "items": {
              "type": "string"
            },
            "maxItems": 50
          },
          "remove": {
            "type": "array",
            "description": "Removes the provided artifacts (if they exist) from the field.\n",
            "example": [
              "ARTIFACT-12345"
            ],
            "items": {
              "type": "string"
            },
            "maxItems": 50
          },
          "set": {
            "type": "array",
            "description": "Sets the field to the provided artifacts.",
            "example": [
              "ARTIFACT-12345"
            ],
            "items": {
              "type": "string"
            },
            "maxItems": 50
          }
        },
        "title": "works-update-request-artifacts"
      },
      "works-update-request-issue": {
        "type": "object",
        "properties": {
          "developed_with": {
            "$ref": "#/components/schemas/works-update-request-issue-developed-with"
          },
          "priority": {
            "$ref": "#/components/schemas/issue-priority"
          },
          "priority_v2": {
            "type": "integer",
            "description": "Priority enum id of the work based upon impact and criticality.\n",
            "format": "int64"
          },
          "sprint": {
            "type": "string",
            "description": "Updates the sprint that the issue belongs to.",
            "nullable": true
          },
          "target_start_date": {
            "type": "string",
            "description": "Updates the timestamp for when the work is expected to start.\n",
            "example": "2023-01-01T12:00:00.000Z",
            "format": "date-time",
            "nullable": true
          }
        },
        "title": "works-update-request-issue"
      },
      "works-update-request-issue-developed-with": {
        "type": "object",
        "properties": {
          "set": {
            "type": "array",
            "description": "Sets the IDs of the parts associated with issue.",
            "example": [
              "PROD-12345"
            ],
            "items": {
              "type": "string"
            },
            "maxItems": 8
          }
        },
        "title": "works-update-request-issue-developed-with"
      },
      "works-update-request-owned-by": {
        "type": "object",
        "properties": {
          "set": {
            "type": "array",
            "description": "Sets the owner IDs to the provided user IDs. This must not be\nempty.\n",
            "example": [
              "DEVU-12345"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "title": "works-update-request-owned-by"
      },
      "works-update-request-reported-by": {
        "type": "object",
        "properties": {
          "set": {
            "type": "array",
            "description": "Sets the users that reported the work to the provided user IDs.\n",
            "example": [
              "DEVU-12345"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "title": "works-update-request-reported-by"
      },
      "works-update-request-staged-info-staged-info-update": {
        "type": "object",
        "properties": {
          "unresolved_fields": {
            "type": "array",
            "description": "Updates the unresolved fields of the staged work.",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "unresolved_fields"
        ],
        "title": "works-update-request-staged-info-staged-info-update"
      },
      "works-update-request-tags": {
        "type": "object",
        "properties": {
          "set": {
            "type": "array",
            "description": "Sets the provided tags on the work item.",
            "items": {
              "$ref": "#/components/schemas/set-tag-with-value"
            }
          }
        },
        "title": "works-update-request-tags"
      },
      "works-update-request-ticket": {
        "type": "object",
        "properties": {
          "channels": {
            "$ref": "#/components/schemas/works-update-request-ticket-channels"
          },
          "group": {
            "type": "string",
            "description": "Updates the group that the ticket is associated with.",
            "nullable": true
          },
          "is_spam": {
            "type": "boolean",
            "description": "Updates whether the ticket is spam."
          },
          "needs_response": {
            "type": "boolean",
            "description": "Updates whether the ticket needs a response."
          },
          "rev_org": {
            "type": "string",
            "description": "Updates the Rev organization that the ticket is associated with.\n",
            "example": "REV-AbCdEfGh",
            "nullable": true
          },
          "severity": {
            "$ref": "#/components/schemas/ticket-severity"
          }
        },
        "title": "works-update-request-ticket"
      },
      "works-update-request-ticket-channels": {
        "type": "object",
        "properties": {
          "set": {
            "type": "array",
            "description": "Sets the channels to the provided channels.",
            "items": {
              "$ref": "#/components/schemas/ticket-channels"
            }
          }
        },
        "title": "works-update-request-ticket-channels"
      },
      "works-update-response": {
        "type": "object",
        "properties": {
          "work": {
            "$ref": "#/components/schemas/work"
          }
        },
        "required": [
          "work"
        ],
        "title": "works-update-response",
        "x-go-name": "WorksUpdateResponseBody"
      }
    },
    "securitySchemes": {
      "auth-token": {
        "type": "http",
        "description": "All the DevRev APIs require a token to authenticate the user. Provide `Authorization: <token>` as a header to every API request.\n [How do I find my token?](https://devrev.ai/docs/apis/auth)",
        "scheme": "bearer",
        "x-fern-bearer": {
          "env": "DEVREV_TOKEN",
          "name": "token"
        }
      }
    }
  },
  "info": {
    "description": "DevRev's REST API.",
    "title": "DevRev REST API",
    "version": "2022-10-20"
  },
  "openapi": "3.0.3",
  "paths": {
    "/accounts.create": {
      "post": {
        "description": "Creates an account, which is a record representing a customer or an\norganization.\n",
        "operationId": "accounts-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accounts-create-request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accounts-create-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "accounts"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/accounts.delete": {
      "post": {
        "description": "Deletes an account.",
        "operationId": "accounts-delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accounts-delete-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accounts-delete-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "accounts"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/accounts.export": {
      "get": {
        "description": "Exports a collection of accounts.",
        "operationId": "accounts-export",
        "parameters": [
          {
            "description": "Filters for accounts created by the specified user(s).",
            "explode": false,
            "in": "query",
            "name": "created_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for objects created after the provided timestamp (inclusive).\n",
            "explode": false,
            "in": "query",
            "name": "created_date.after",
            "schema": {
              "type": "string",
              "example": "2023-01-01T12:00:00.000Z",
              "format": "date-time"
            }
          },
          {
            "description": "Filters for objects created before the provided timestamp\n(inclusive).\n",
            "explode": false,
            "in": "query",
            "name": "created_date.before",
            "schema": {
              "type": "string",
              "example": "2023-01-01T12:00:00.000Z",
              "format": "date-time"
            }
          },
          {
            "description": "Array of display names of accounts to be filtered.",
            "explode": false,
            "in": "query",
            "name": "display_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Array of references of accounts to be filtered.",
            "explode": false,
            "in": "query",
            "name": "external_refs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The number of accounts to return. The default is '50'.",
            "explode": false,
            "in": "query",
            "name": "first",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 500,
              "minimum": 1
            }
          },
          {
            "description": "Filters for objects created after the provided timestamp (inclusive).\n",
            "explode": false,
            "in": "query",
            "name": "modified_date.after",
            "schema": {
              "type": "string",
              "example": "2023-01-01T12:00:00.000Z",
              "format": "date-time"
            }
          },
          {
            "description": "Filters for objects created before the provided timestamp\n(inclusive).\n",
            "explode": false,
            "in": "query",
            "name": "modified_date.before",
            "schema": {
              "type": "string",
              "example": "2023-01-01T12:00:00.000Z",
              "format": "date-time"
            }
          },
          {
            "description": "Fields to sort the accounts by and the direction to sort them in.\n",
            "explode": false,
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for accounts on specified stages.",
            "explode": false,
            "in": "query",
            "name": "stage",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accounts-export-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "accounts"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "AccountsExportQuery"
      },
      "post": {
        "description": "Exports a collection of accounts.",
        "operationId": "accounts-export-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accounts-export-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accounts-export-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "accounts"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/accounts.get": {
      "get": {
        "description": "Retrieves an account's information.",
        "operationId": "accounts-get",
        "parameters": [
          {
            "description": "The ID of the account to be retrieved.",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ACC-12345"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accounts-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "accounts"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "AccountsGetQuery"
      },
      "post": {
        "description": "Retrieves an account's information.",
        "operationId": "accounts-get-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accounts-get-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accounts-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "accounts"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/accounts.list": {
      "get": {
        "description": "Gets a list of accounts.",
        "operationId": "accounts-list",
        "parameters": [
          {
            "description": "Filters for accounts created by the specified user(s).",
            "explode": false,
            "in": "query",
            "name": "created_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for objects created after the provided timestamp (inclusive).\n",
            "explode": false,
            "in": "query",
            "name": "created_date.after",
            "schema": {
              "type": "string",
              "example": "2023-01-01T12:00:00.000Z",
              "format": "date-time"
            }
          },
          {
            "description": "Filters for objects created before the provided timestamp\n(inclusive).\n",
            "explode": false,
            "in": "query",
            "name": "created_date.before",
            "schema": {
              "type": "string",
              "example": "2023-01-01T12:00:00.000Z",
              "format": "date-time"
            }
          },
          {
            "description": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
            "explode": false,
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of display names of accounts to be filtered.",
            "explode": false,
            "in": "query",
            "name": "display_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Array of references of accounts to be filtered.",
            "explode": false,
            "in": "query",
            "name": "external_refs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The maximum number of accounts to return per page. The default is\n'50'.\n",
            "explode": false,
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
            "explode": false,
            "in": "query",
            "name": "mode",
            "schema": {
              "$ref": "#/components/schemas/list-mode"
            }
          },
          {
            "description": "Filters for objects created after the provided timestamp (inclusive).\n",
            "explode": false,
            "in": "query",
            "name": "modified_date.after",
            "schema": {
              "type": "string",
              "example": "2023-01-01T12:00:00.000Z",
              "format": "date-time"
            }
          },
          {
            "description": "Filters for objects created before the provided timestamp\n(inclusive).\n",
            "explode": false,
            "in": "query",
            "name": "modified_date.before",
            "schema": {
              "type": "string",
              "example": "2023-01-01T12:00:00.000Z",
              "format": "date-time"
            }
          },
          {
            "description": "Fields to sort the accounts by and the direction to sort them in.\n",
            "explode": false,
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for accounts on specified stages.",
            "explode": false,
            "in": "query",
            "name": "stage",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accounts-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "accounts"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "AccountsListQuery"
      },
      "post": {
        "description": "Gets a list of accounts.",
        "operationId": "accounts-list-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accounts-list-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accounts-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "accounts"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/accounts.update": {
      "post": {
        "description": "Updates an account's information.",
        "operationId": "accounts-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accounts-update-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accounts-update-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "accounts"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/artifacts.get": {
      "get": {
        "description": "Gets the requested artifact's information.",
        "operationId": "artifacts-get",
        "parameters": [
          {
            "description": "The requested artifact's ID.",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ARTIFACT-12345"
            }
          },
          {
            "description": "The version of the artifact that needs to be fetched.",
            "explode": false,
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/artifacts-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "artifacts"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "ArtifactsGetQuery"
      },
      "post": {
        "description": "Gets the requested artifact's information.",
        "operationId": "artifacts-get-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/artifacts-get-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/artifacts-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "artifacts"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/artifacts.list": {
      "get": {
        "description": "List the artifacts attached to an object.",
        "operationId": "artifacts-list",
        "parameters": [
          {
            "description": "The ID of the object to filter artifacts.",
            "explode": false,
            "in": "query",
            "name": "parent_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/artifacts-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "artifacts"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "ArtifactsListQuery"
      },
      "post": {
        "description": "List the artifacts attached to an object.",
        "operationId": "artifacts-list-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/artifacts-list-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/artifacts-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "artifacts"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/artifacts.locate": {
      "get": {
        "description": "Gets the download URL for the artifact.",
        "operationId": "artifacts-locate",
        "parameters": [
          {
            "description": "The ID of the artifact to get the URL for.",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ARTIFACT-12345"
            }
          },
          {
            "description": "The version of the artifact that needs to be fetched.",
            "explode": false,
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/artifacts-locate-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "artifacts"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "ArtifactsLocateQuery"
      },
      "post": {
        "description": "Gets the download URL for the artifact.",
        "operationId": "artifacts-locate-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/artifacts-locate-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/artifacts-locate-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "artifacts"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/artifacts.prepare": {
      "post": {
        "description": "Creates an artifact and generates an upload URL for its data.\n",
        "operationId": "artifacts-prepare",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/artifacts-prepare-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/artifacts-prepare-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "artifacts"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/auth-tokens.create": {
      "post": {
        "description": "Creates a JWT corresponding to the requested token type for the\nauthenticated user.\n",
        "operationId": "auth-tokens-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth-tokens-create-request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth-tokens-create-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "auth-tokens"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/auth-tokens.delete": {
      "post": {
        "description": "Revokes the token that matches the given token ID issued under the\ngiven Dev organization.\n",
        "operationId": "auth-tokens-delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth-tokens-delete-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "auth-tokens"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/auth-tokens.get": {
      "get": {
        "description": "Gets the token metadata corresponding to the given token ID under the\ngiven Dev organization.\n",
        "operationId": "auth-tokens-get",
        "parameters": [
          {
            "description": "The unique identifier of the token under a given Dev organization.\n",
            "explode": false,
            "in": "query",
            "name": "token_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth-tokens-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "auth-tokens"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "AuthTokensGetQuery"
      },
      "post": {
        "description": "Gets the token metadata corresponding to the given token ID under the\ngiven Dev organization.\n",
        "operationId": "auth-tokens-get-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth-tokens-get-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth-tokens-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "auth-tokens"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/auth-tokens.list": {
      "get": {
        "description": "Gets the token metadata for all the tokens corresponding to the given\ntoken type issued for a given subject.\n",
        "operationId": "auth-tokens-list",
        "parameters": [
          {
            "description": "An identifier that represents the application, which requested the\ntoken. Only relevant for application access tokens.\n",
            "explode": false,
            "in": "query",
            "name": "client_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The type of the requested token. If no value is specified, the\nresponse will include tokens of all the types.\n",
            "explode": false,
            "in": "query",
            "name": "requested_token_type",
            "schema": {
              "$ref": "#/components/schemas/auth-token-requested-token-type"
            }
          },
          {
            "description": "The subject associated with the token. In the absence of this\nparameter, the ID of the authenticated entity is treated as the\nsubject.\n",
            "explode": false,
            "in": "query",
            "name": "subject",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth-tokens-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "auth-tokens"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "AuthTokensListQuery"
      },
      "post": {
        "description": "Gets the token metadata for all the tokens corresponding to the given\ntoken type issued for a given subject.\n",
        "operationId": "auth-tokens-list-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth-tokens-list-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth-tokens-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "auth-tokens"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/auth-tokens.self.delete": {
      "post": {
        "description": "Revokes all the tokens that matches the given token type created by the\nauthenticated user.\n",
        "operationId": "auth-tokens-self-delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth-tokens-self-delete-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "auth-tokens"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/auth-tokens.update": {
      "post": {
        "description": "Updates token metadata of a token issued under a given Dev\norganization.\n",
        "operationId": "auth-tokens-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth-tokens-update-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth-tokens-update-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "auth-tokens"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/dev-orgs.auth-connections.create": {
      "post": {
        "description": "Creates a new enterprise authentication connection for a Dev\norganization. This authentication connection will not be enabled by\ndefault for the organization and the user will need to explicitly\nenable this. Keep in mind that at a time, only one authentication\nconnection can be enabled for a Dev organization. At present, only 5\nenterprise connections can be created by an organization.\n",
        "operationId": "dev-org-auth-connections-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dev-org-auth-connections-create-request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dev-org-auth-connections-create-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "auth-connection",
          "dev-orgs"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/dev-orgs.auth-connections.delete": {
      "post": {
        "description": "Deletes an authentication connection. Only enterprise connections which\nare explicitly set up for a Dev organization can be deleted. Default\nconnections can not be deleted using this method.\n",
        "operationId": "dev-org-auth-connections-delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dev-org-auth-connections-delete-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "auth-connection",
          "dev-orgs"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/dev-orgs.auth-connections.get": {
      "get": {
        "description": "Retrieves the details for an authentication connection.",
        "operationId": "dev-org-auth-connections-get",
        "parameters": [
          {
            "description": "ID of the authentication connection.",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dev-org-auth-connections-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "auth-connection",
          "dev-orgs"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "DevOrgAuthConnectionsGetQuery"
      },
      "post": {
        "description": "Retrieves the details for an authentication connection.",
        "operationId": "dev-org-auth-connections-get-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dev-org-auth-connections-get-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dev-org-auth-connections-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "auth-connection",
          "dev-orgs"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/dev-orgs.auth-connections.list": {
      "get": {
        "description": "Lists all the authentication connections available for a Dev\norganization. This list will include both social and enterprise\nconnections which are either available by default or are explicitly\ncreated by the user.\n",
        "operationId": "dev-org-auth-connections-list",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dev-org-auth-connections-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "auth-connection",
          "dev-orgs"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "DevOrgAuthConnectionsListQuery"
      },
      "post": {
        "description": "Lists all the authentication connections available for a Dev\norganization. This list will include both social and enterprise\nconnections which are either available by default or are explicitly\ncreated by the user.\n",
        "operationId": "dev-org-auth-connections-list-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/empty"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dev-org-auth-connections-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "auth-connection",
          "dev-orgs"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/dev-orgs.auth-connections.toggle": {
      "post": {
        "description": "Enable or disable an authentication connection for a Dev organization.\nCurrently, only 1 authentication connection can be enabled at a time.\nWhen a new authentication connection is enabled, the connection which\nis currently enabled for the Dev organization is automatically\ndisabled.\n",
        "operationId": "dev-org-auth-connections-toggle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dev-org-auth-connections-toggle-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "auth-connection",
          "dev-orgs"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/dev-orgs.auth-connections.update": {
      "post": {
        "description": "Updates an authentication connection.",
        "operationId": "dev-org-auth-connections-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dev-org-auth-connections-update-request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dev-org-auth-connections-update-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "auth-connection",
          "dev-orgs"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/dev-users.get": {
      "get": {
        "description": "Gets the requested user's information.",
        "operationId": "dev-users-get",
        "parameters": [
          {
            "description": "User ID of the requested Dev user.",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dev-users-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "dev-users"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "DevUsersGetQuery"
      },
      "post": {
        "description": "Gets the requested user's information.",
        "operationId": "dev-users-get-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dev-users-get-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dev-users-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "dev-users"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/dev-users.list": {
      "get": {
        "description": "Lists users within your organization.",
        "operationId": "dev-users-list",
        "parameters": [
          {
            "description": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
            "explode": false,
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filters Dev users based on email addresses.",
            "explode": false,
            "in": "query",
            "name": "email",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique ID of the user in the external source.",
            "explode": false,
            "in": "query",
            "name": "external_identity.id",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Issuer of the external identity of the user.",
            "explode": false,
            "in": "query",
            "name": "external_identity.issuer",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum number of Dev users to return. The default is '50'.\n",
            "explode": false,
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
            "explode": false,
            "in": "query",
            "name": "mode",
            "schema": {
              "$ref": "#/components/schemas/list-mode"
            }
          },
          {
            "description": "Fields to sort the Dev users by and the direction to sort them.\n",
            "explode": false,
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters Dev users based on state.",
            "explode": false,
            "in": "query",
            "name": "state",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/user-state"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dev-users-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "dev-users"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "DevUsersListQuery"
      },
      "post": {
        "description": "Lists users within your organization.",
        "operationId": "dev-users-list-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dev-users-list-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dev-users-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "dev-users"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/dev-users.self": {
      "get": {
        "description": "Gets the authenticated user's information.",
        "operationId": "dev-users-self",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dev-users-self-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "dev-users"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "DevUsersSelfQuery"
      },
      "post": {
        "description": "Gets the authenticated user's information.",
        "operationId": "dev-users-self-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dev-users-self-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dev-users-self-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "dev-users"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/keyrings.authorize": {
      "get": {
        "description": "OAuth2 authorization callback.",
        "operationId": "keyrings-create-callback",
        "parameters": [
          {
            "description": "Code to exchange for an access token.",
            "explode": false,
            "in": "query",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "State value given to the authorization request.",
            "explode": false,
            "in": "query",
            "name": "state",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "security": [],
        "tags": [
          "keyring"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "KeyringsCreateCallbackQuery"
      },
      "post": {
        "description": "OAuth2 authorization callback.",
        "operationId": "keyrings-create-callback-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/keyrings-create-callback-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "keyring"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/parts.create": {
      "post": {
        "description": "Creates new [part](https://devrev.ai/docs/product/parts).",
        "operationId": "parts-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/parts-create-request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/parts-create-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "parts"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/parts.delete": {
      "post": {
        "description": "Deletes a [part](https://devrev.ai/docs/product/parts).",
        "operationId": "parts-delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/parts-delete-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/parts-delete-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "parts"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/parts.get": {
      "get": {
        "description": "Gets a [part's](https://devrev.ai/docs/product/parts) information.\n",
        "operationId": "parts-get",
        "parameters": [
          {
            "description": "The ID of the part to retrieve.",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "PROD-12345"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/parts-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "parts"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "PartsGetQuery"
      },
      "post": {
        "description": "Gets a [part's](https://devrev.ai/docs/product/parts) information.\n",
        "operationId": "parts-get-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/parts-get-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/parts-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "parts"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/parts.list": {
      "get": {
        "description": "Lists a collection of [parts](https://devrev.ai/docs/product/parts).\n",
        "operationId": "parts-list",
        "parameters": [
          {
            "description": "Filters for parts created by any of these users.",
            "explode": false,
            "in": "query",
            "name": "created_by",
            "schema": {
              "type": "array",
              "example": [
                "DEVU-12345"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
            "explode": false,
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum number of parts to return. The default is '50'.\n",
            "explode": false,
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
            "explode": false,
            "in": "query",
            "name": "mode",
            "schema": {
              "$ref": "#/components/schemas/list-mode"
            }
          },
          {
            "description": "Filters for parts of the provided name(s).",
            "explode": false,
            "in": "query",
            "name": "name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for parts owned by any of these users.",
            "explode": false,
            "in": "query",
            "name": "owned_by",
            "schema": {
              "type": "array",
              "example": [
                "DEVU-12345"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Number of levels to fetch the part hierarchy up to.",
            "explode": false,
            "in": "query",
            "name": "parent_part.level",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "description": "Part IDs to fetch the hierarchy for. Required if any parent_part.*\nfields are provided.\n",
            "explode": false,
            "in": "query",
            "name": "parent_part.parts",
            "schema": {
              "type": "array",
              "example": [
                "PROD-12345"
              ],
              "items": {
                "type": "string"
              },
              "minItems": 1
            }
          },
          {
            "description": "Filters for parts of the provided type(s).",
            "explode": false,
            "in": "query",
            "name": "type",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/part-type"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/parts-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "parts"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "PartsListQuery"
      },
      "post": {
        "description": "Lists a collection of [parts](https://devrev.ai/docs/product/parts).\n",
        "operationId": "parts-list-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/parts-list-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/parts-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "parts"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/parts.update": {
      "post": {
        "description": "Updates a [part's](https://devrev.ai/docs/product/parts) information.\n",
        "operationId": "parts-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/parts-update-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/parts-update-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "parts"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/rev-orgs.create": {
      "post": {
        "description": "Creates a Rev organization in the authenticated user's Dev\norganization.\n",
        "operationId": "rev-orgs-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rev-orgs-create-request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rev-orgs-create-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "rev-orgs"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/rev-orgs.delete": {
      "post": {
        "description": "Deletes the Rev organization.",
        "operationId": "rev-orgs-delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rev-orgs-delete-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rev-orgs-delete-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "rev-orgs"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/rev-orgs.get": {
      "get": {
        "description": "Retrieves the Rev organization's information.",
        "operationId": "rev-orgs-get",
        "parameters": [
          {
            "description": "The ID of account for which default Rev organization is to be\nfetched.\n",
            "explode": false,
            "in": "query",
            "name": "account",
            "schema": {
              "type": "string",
              "example": "ACC-12345"
            }
          },
          {
            "description": "The ID of the required Rev organization.",
            "explode": false,
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "example": "REV-AbCdEfGh"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rev-orgs-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "rev-orgs"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "RevOrgsGetQuery"
      },
      "post": {
        "description": "Retrieves the Rev organization's information.",
        "operationId": "rev-orgs-get-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rev-orgs-get-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rev-orgs-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "rev-orgs"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/rev-orgs.list": {
      "get": {
        "description": "Gets the list of Rev organizations' information belonging to the\nauthenticated user's Dev Organization which the user is also authorized\nto access.\n",
        "operationId": "rev-orgs-list",
        "parameters": [
          {
            "description": "Filters by creator.",
            "explode": false,
            "in": "query",
            "name": "created_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for objects created after the provided timestamp (inclusive).\n",
            "explode": false,
            "in": "query",
            "name": "created_date.after",
            "schema": {
              "type": "string",
              "example": "2023-01-01T12:00:00.000Z",
              "format": "date-time"
            }
          },
          {
            "description": "Filters for objects created before the provided timestamp\n(inclusive).\n",
            "explode": false,
            "in": "query",
            "name": "created_date.before",
            "schema": {
              "type": "string",
              "example": "2023-01-01T12:00:00.000Z",
              "format": "date-time"
            }
          },
          {
            "description": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
            "explode": false,
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of display names of Rev orgs to be filtered.",
            "explode": false,
            "in": "query",
            "name": "display_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "List of external refs to filter Rev organizations for.",
            "explode": false,
            "in": "query",
            "name": "external_ref",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The maximum number of Rev organizations to be retrieved per page.\n",
            "explode": false,
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
            "explode": false,
            "in": "query",
            "name": "mode",
            "schema": {
              "$ref": "#/components/schemas/list-mode"
            }
          },
          {
            "description": "Filters for objects created after the provided timestamp (inclusive).\n",
            "explode": false,
            "in": "query",
            "name": "modified_date.after",
            "schema": {
              "type": "string",
              "example": "2023-01-01T12:00:00.000Z",
              "format": "date-time"
            }
          },
          {
            "description": "Filters for objects created before the provided timestamp\n(inclusive).\n",
            "explode": false,
            "in": "query",
            "name": "modified_date.before",
            "schema": {
              "type": "string",
              "example": "2023-01-01T12:00:00.000Z",
              "format": "date-time"
            }
          },
          {
            "description": "Fields to sort the Rev organizations by and the direction to sort\nthem.\n",
            "explode": false,
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rev-orgs-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "rev-orgs"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "RevOrgsListQuery"
      },
      "post": {
        "description": "Gets the list of Rev organizations' information belonging to the\nauthenticated user's Dev Organization which the user is also authorized\nto access.\n",
        "operationId": "rev-orgs-list-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rev-orgs-list-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rev-orgs-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "rev-orgs"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/rev-orgs.update": {
      "post": {
        "description": "Updates the Rev organization's information.",
        "operationId": "rev-orgs-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rev-orgs-update-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rev-orgs-update-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "rev-orgs"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/sla-trackers.get": {
      "get": {
        "description": "Gets an SLA tracker.",
        "operationId": "sla-trackers-get",
        "parameters": [
          {
            "description": "The ID of the SLA tracker to get.",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sla-trackers-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "slas"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "SlaTrackersGetQuery"
      },
      "post": {
        "description": "Gets an SLA tracker.",
        "operationId": "sla-trackers-get-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sla-trackers-get-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sla-trackers-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "slas"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/tags.create": {
      "post": {
        "description": "Creates a new tag, which is used to create associations between objects\nand a logical concept denoted by the tag's name.\n",
        "operationId": "tags-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tags-create-request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tags-create-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "tags"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/tags.delete": {
      "post": {
        "description": "Deletes a tag.",
        "operationId": "tags-delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tags-delete-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tags-delete-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "tags"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/tags.get": {
      "get": {
        "description": "Gets a tag's information.",
        "operationId": "tags-get",
        "parameters": [
          {
            "description": "The requested tag's ID.",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "TAG-12345"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tags-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "tags"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "TagsGetQuery"
      },
      "post": {
        "description": "Gets a tag's information.",
        "operationId": "tags-get-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tags-get-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tags-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "tags"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/tags.list": {
      "get": {
        "description": "Lists the available tags.",
        "operationId": "tags-list",
        "parameters": [
          {
            "description": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
            "explode": false,
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum number of tags to return. The default is '50'.",
            "explode": false,
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
            "explode": false,
            "in": "query",
            "name": "mode",
            "schema": {
              "$ref": "#/components/schemas/list-mode"
            }
          },
          {
            "description": "Filters for tags with the provided names.",
            "explode": false,
            "in": "query",
            "name": "name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Fields to sort tags by and the direction to sort them.",
            "explode": false,
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tags-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "tags"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "TagsListQuery"
      },
      "post": {
        "description": "Lists the available tags.",
        "operationId": "tags-list-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tags-list-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tags-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "tags"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/tags.update": {
      "post": {
        "description": "Updates a tag's information.",
        "operationId": "tags-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tags-update-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tags-update-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "tags"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/timeline-entries.create": {
      "post": {
        "description": "Creates a new entry on an object's timeline.",
        "operationId": "timeline-entries-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/timeline-entries-create-request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/timeline-entries-create-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "timeline-entries"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/timeline-entries.delete": {
      "post": {
        "description": "Deletes an entry from an object's timeline.",
        "operationId": "timeline-entries-delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/timeline-entries-delete-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/timeline-entries-delete-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "timeline-entries"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/timeline-entries.get": {
      "get": {
        "description": "Gets an entry on an object's timeline.",
        "operationId": "timeline-entries-get",
        "parameters": [
          {
            "description": "The ID of the timeline entry to get.",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "don:core:<partition>:devo/<dev-org-id>:ticket/123:timeline_event/<timeline-event-id>"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/timeline-entries-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "timeline-entries"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "TimelineEntriesGetQuery"
      },
      "post": {
        "description": "Gets an entry on an object's timeline.",
        "operationId": "timeline-entries-get-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/timeline-entries-get-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/timeline-entries-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "timeline-entries"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/timeline-entries.list": {
      "get": {
        "description": "Lists the timeline entries for an object.",
        "operationId": "timeline-entries-list",
        "parameters": [
          {
            "description": "The ID of the object to list timeline entries for.",
            "explode": false,
            "in": "query",
            "name": "object",
            "required": true,
            "schema": {
              "type": "string",
              "example": "PROD-12345"
            }
          },
          {
            "description": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
            "explode": false,
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum number of entries to return. If not set, then this\ndefaults to `50`.\n",
            "explode": false,
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
            "explode": false,
            "in": "query",
            "name": "mode",
            "schema": {
              "$ref": "#/components/schemas/list-mode"
            }
          },
          {
            "description": "The visibility of the timeline entries to filter for. Note this is a\nstrict filter, such that only entries with the exact visibilities\nspecified will be returned.\n",
            "explode": false,
            "in": "query",
            "name": "visibility",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/timeline-entry-visibility"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/timeline-entries-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "timeline-entries"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "TimelineEntriesListQuery"
      },
      "post": {
        "description": "Lists the timeline entries for an object.",
        "operationId": "timeline-entries-list-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/timeline-entries-list-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/timeline-entries-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "timeline-entries"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/timeline-entries.update": {
      "post": {
        "description": "Updates an entry on an object's timeline.",
        "operationId": "timeline-entries-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/timeline-entries-update-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/timeline-entries-update-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "timeline-entries"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/webhooks.create": {
      "post": {
        "description": "Creates a new webhook target.",
        "operationId": "webhooks-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhooks-create-request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhooks-create-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "webhooks"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/webhooks.delete": {
      "post": {
        "description": "Deletes the requested webhook.",
        "operationId": "webhooks-delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhooks-delete-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhooks-delete-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "webhooks"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/webhooks.get": {
      "get": {
        "description": "Gets the requested webhook's information.",
        "operationId": "webhooks-get",
        "parameters": [
          {
            "description": "ID for the webhook.",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhooks-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "webhooks"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "WebhooksGetQuery"
      },
      "post": {
        "description": "Gets the requested webhook's information.",
        "operationId": "webhooks-get-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhooks-get-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhooks-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "webhooks"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/webhooks.list": {
      "get": {
        "description": "Lists the webhooks.",
        "operationId": "webhooks-list",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhooks-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "webhooks"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "WebhooksListQuery"
      },
      "post": {
        "description": "Lists the webhooks.",
        "operationId": "webhooks-list-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhooks-list-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhooks-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "webhooks"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/webhooks.update": {
      "post": {
        "description": "Updates the requested webhook.",
        "operationId": "webhooks-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhooks-update-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhooks-update-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "webhooks"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/works.create": {
      "post": {
        "description": "Creates new work ([issue](https://devrev.ai/docs/product/build),\n[ticket](https://devrev.ai/docs/product/support)) item.\n[task](https://docs.devrev.ai/product/tasks) and opportunity work types\nare supported in the beta version.\n",
        "operationId": "works-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/works-create-request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/works-create-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "works"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/works.delete": {
      "post": {
        "description": "Deletes a work item.",
        "operationId": "works-delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/works-delete-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/works-delete-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "works"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/works.export": {
      "get": {
        "description": "Exports a collection of work items.",
        "operationId": "works-export",
        "parameters": [
          {
            "description": "Filters for work belonging to any of the provided parts.",
            "explode": false,
            "in": "query",
            "name": "applies_to_part",
            "schema": {
              "type": "array",
              "example": [
                "PROD-12345"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for work created by any of these users.",
            "explode": false,
            "in": "query",
            "name": "created_by",
            "schema": {
              "type": "array",
              "example": [
                "DEVU-12345"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The number of work items to return. The default is '50', the maximum\nis '5000'.\n",
            "explode": false,
            "in": "query",
            "name": "first",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Filters for issues with any of the provided Accounts.",
            "explode": false,
            "in": "query",
            "name": "issue.accounts",
            "schema": {
              "type": "array",
              "example": [
                "ACC-12345"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for issues with any of the provided priorities.",
            "explode": false,
            "in": "query",
            "name": "issue.priority",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/issue-priority"
              }
            }
          },
          {
            "description": "Filters for issues with any of the provided priority enum ids.\n",
            "explode": false,
            "in": "query",
            "name": "issue.priority_v2",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "description": "Filters for issues with any of the provided Rev organizations.\n",
            "explode": false,
            "in": "query",
            "name": "issue.rev_orgs",
            "schema": {
              "type": "array",
              "example": [
                "REV-AbCdEfGh"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for records with any of the provided SLA stages.",
            "explode": false,
            "in": "query",
            "name": "issue.sla_summary.stage",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/sla-summary-stage"
              }
            }
          },
          {
            "description": "Filters for issues with any of the sprint.",
            "explode": false,
            "in": "query",
            "name": "issue.sprint",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for work owned by any of these users.",
            "explode": false,
            "in": "query",
            "name": "owned_by",
            "schema": {
              "type": "array",
              "example": [
                "DEVU-12345"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for work reported by any of these users.",
            "explode": false,
            "in": "query",
            "name": "reported_by",
            "schema": {
              "type": "array",
              "example": [
                "DEVU-12345"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for records in the provided stage(s) by name.",
            "explode": false,
            "in": "query",
            "name": "stage.name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for issues that are staged.",
            "explode": false,
            "in": "query",
            "name": "staged_info.is_staged",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filters for works with selected sync statuses.",
            "explode": false,
            "in": "query",
            "name": "sync_metadata.last_sync_in.status",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/sync-metadata-filter-sync-in-filter-status"
              }
            }
          },
          {
            "description": "Filters for works modified with selected sync units.",
            "explode": false,
            "in": "query",
            "name": "sync_metadata.last_sync_in.sync_unit",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for works with selected sync statuses.",
            "explode": false,
            "in": "query",
            "name": "sync_metadata.last_sync_out.status",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/sync-metadata-filter-sync-out-filter-status"
              }
            }
          },
          {
            "description": "Filters for works modified with selected sync units.",
            "explode": false,
            "in": "query",
            "name": "sync_metadata.last_sync_out.sync_unit",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for issues synced from this specific origin system.\n",
            "explode": false,
            "in": "query",
            "name": "sync_metadata.origin_system",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for work with any of the provided tags.",
            "explode": false,
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "array",
              "example": [
                "TAG-12345"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for tickets with any of the provided channels.",
            "explode": false,
            "in": "query",
            "name": "ticket.channels",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ticket-channels"
              }
            }
          },
          {
            "description": "Filters for tickets belonging to specific groups.",
            "explode": false,
            "in": "query",
            "name": "ticket.group",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for tickets that are spam.",
            "explode": false,
            "in": "query",
            "name": "ticket.is_spam",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filters for tickets that need response.",
            "explode": false,
            "in": "query",
            "name": "ticket.needs_response",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filters for tickets that are associated with any of the provided Rev\norganizations.\n",
            "explode": false,
            "in": "query",
            "name": "ticket.rev_org",
            "schema": {
              "type": "array",
              "example": [
                "REV-AbCdEfGh"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for tickets with any of the provided severities.",
            "explode": false,
            "in": "query",
            "name": "ticket.severity",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ticket-severity"
              }
            }
          },
          {
            "description": "Filters for records with any of the provided SLA stages.",
            "explode": false,
            "in": "query",
            "name": "ticket.sla_summary.stage",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/sla-summary-stage"
              }
            }
          },
          {
            "description": "Filters for tickets with any of the provided source channels.\n",
            "explode": false,
            "in": "query",
            "name": "ticket.source_channel",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for work of the provided types.",
            "explode": false,
            "in": "query",
            "name": "type",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/work-type"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/works-export-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "works"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "WorksExportQuery"
      },
      "post": {
        "description": "Exports a collection of work items.",
        "operationId": "works-export-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/works-export-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/works-export-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "works"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/works.get": {
      "get": {
        "description": "Gets a work item's information.",
        "operationId": "works-get",
        "parameters": [
          {
            "description": "The work's ID.",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ISS-12345"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/works-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "works"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "WorksGetQuery"
      },
      "post": {
        "description": "Gets a work item's information.",
        "operationId": "works-get-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/works-get-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/works-get-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "works"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/works.list": {
      "get": {
        "description": "Lists a collection of work items.",
        "operationId": "works-list",
        "parameters": [
          {
            "description": "Filters for work belonging to any of the provided parts.",
            "explode": false,
            "in": "query",
            "name": "applies_to_part",
            "schema": {
              "type": "array",
              "example": [
                "PROD-12345"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for work created by any of these users.",
            "explode": false,
            "in": "query",
            "name": "created_by",
            "schema": {
              "type": "array",
              "example": [
                "DEVU-12345"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
            "explode": false,
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filters for issues with any of the provided Accounts.",
            "explode": false,
            "in": "query",
            "name": "issue.accounts",
            "schema": {
              "type": "array",
              "example": [
                "ACC-12345"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for issues with any of the provided priorities.",
            "explode": false,
            "in": "query",
            "name": "issue.priority",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/issue-priority"
              }
            }
          },
          {
            "description": "Filters for issues with any of the provided priority enum ids.\n",
            "explode": false,
            "in": "query",
            "name": "issue.priority_v2",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "description": "Filters for issues with any of the provided Rev organizations.\n",
            "explode": false,
            "in": "query",
            "name": "issue.rev_orgs",
            "schema": {
              "type": "array",
              "example": [
                "REV-AbCdEfGh"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for records with any of the provided SLA stages.",
            "explode": false,
            "in": "query",
            "name": "issue.sla_summary.stage",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/sla-summary-stage"
              }
            }
          },
          {
            "description": "Filters for issues with any of the sprint.",
            "explode": false,
            "in": "query",
            "name": "issue.sprint",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The maximum number of works to return. The default is '50'.\n",
            "explode": false,
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
            "explode": false,
            "in": "query",
            "name": "mode",
            "schema": {
              "$ref": "#/components/schemas/list-mode"
            }
          },
          {
            "description": "Filters for work owned by any of these users.",
            "explode": false,
            "in": "query",
            "name": "owned_by",
            "schema": {
              "type": "array",
              "example": [
                "DEVU-12345"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for work reported by any of these users.",
            "explode": false,
            "in": "query",
            "name": "reported_by",
            "schema": {
              "type": "array",
              "example": [
                "DEVU-12345"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for records in the provided stage(s) by name.",
            "explode": false,
            "in": "query",
            "name": "stage.name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for issues that are staged.",
            "explode": false,
            "in": "query",
            "name": "staged_info.is_staged",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filters for works with selected sync statuses.",
            "explode": false,
            "in": "query",
            "name": "sync_metadata.last_sync_in.status",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/sync-metadata-filter-sync-in-filter-status"
              }
            }
          },
          {
            "description": "Filters for works modified with selected sync units.",
            "explode": false,
            "in": "query",
            "name": "sync_metadata.last_sync_in.sync_unit",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for works with selected sync statuses.",
            "explode": false,
            "in": "query",
            "name": "sync_metadata.last_sync_out.status",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/sync-metadata-filter-sync-out-filter-status"
              }
            }
          },
          {
            "description": "Filters for works modified with selected sync units.",
            "explode": false,
            "in": "query",
            "name": "sync_metadata.last_sync_out.sync_unit",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for issues synced from this specific origin system.\n",
            "explode": false,
            "in": "query",
            "name": "sync_metadata.origin_system",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for work with any of the provided tags.",
            "explode": false,
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "array",
              "example": [
                "TAG-12345"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for tickets with any of the provided channels.",
            "explode": false,
            "in": "query",
            "name": "ticket.channels",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ticket-channels"
              }
            }
          },
          {
            "description": "Filters for tickets belonging to specific groups.",
            "explode": false,
            "in": "query",
            "name": "ticket.group",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for tickets that are spam.",
            "explode": false,
            "in": "query",
            "name": "ticket.is_spam",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filters for tickets that need response.",
            "explode": false,
            "in": "query",
            "name": "ticket.needs_response",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filters for tickets that are associated with any of the provided Rev\norganizations.\n",
            "explode": false,
            "in": "query",
            "name": "ticket.rev_org",
            "schema": {
              "type": "array",
              "example": [
                "REV-AbCdEfGh"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for tickets with any of the provided severities.",
            "explode": false,
            "in": "query",
            "name": "ticket.severity",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ticket-severity"
              }
            }
          },
          {
            "description": "Filters for records with any of the provided SLA stages.",
            "explode": false,
            "in": "query",
            "name": "ticket.sla_summary.stage",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/sla-summary-stage"
              }
            }
          },
          {
            "description": "Filters for tickets with any of the provided source channels.\n",
            "explode": false,
            "in": "query",
            "name": "ticket.source_channel",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filters for work of the provided types.",
            "explode": false,
            "in": "query",
            "name": "type",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/work-type"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/works-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "works"
        ],
        "x-fern-audiences": [
          "docs"
        ],
        "x-request-name": "WorksListQuery"
      },
      "post": {
        "description": "Lists a collection of work items.",
        "operationId": "works-list-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/works-list-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/works-list-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "works"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    },
    "/works.update": {
      "post": {
        "description": "Updates a work item's information.",
        "operationId": "works-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/works-update-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/works-update-response"
                }
              }
            },
            "description": "Success."
          },
          "400": {
            "$ref": "#/components/responses/bad-request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not-found"
          },
          "429": {
            "$ref": "#/components/responses/too-many-requests"
          },
          "500": {
            "$ref": "#/components/responses/internal-server-error"
          },
          "503": {
            "$ref": "#/components/responses/service-unavailable"
          }
        },
        "tags": [
          "works"
        ],
        "x-fern-audiences": [
          "docs",
          "sdks"
        ]
      }
    }
  },
  "security": [
    {
      "auth-token": []
    }
  ],
  "servers": [
    {
      "description": "DevRev API endpoint.",
      "url": "{protocol}://{hostname}",
      "variables": {
        "hostname": {
          "default": "api.devrev.ai",
          "description": "API hostname."
        },
        "protocol": {
          "default": "https",
          "description": "API protocol."
        }
      }
    }
  ],
  "tags": [
    {
      "description": "Accounts management APIs",
      "name": "accounts"
    },
    {
      "description": "Artifact (file) management APIs.",
      "name": "artifacts"
    },
    {
      "description": "Auth Connections of DevOrg.",
      "name": "auth-connection"
    },
    {
      "description": "Security token interactions.",
      "name": "auth-tokens"
    },
    {
      "description": "Dev organization interactions.",
      "name": "dev-orgs"
    },
    {
      "description": "Dev user interactions.",
      "name": "dev-users"
    },
    {
      "description": "DevRev secrets interactions.",
      "name": "keyring"
    },
    {
      "description": "DevRev part interactions.",
      "name": "parts"
    },
    {
      "description": "Rev organization interactions.",
      "name": "rev-orgs"
    },
    {
      "description": "Management APIs for Service Level Agreements.",
      "name": "slas"
    },
    {
      "description": "DevRev tag interactions.",
      "name": "tags"
    },
    {
      "description": "APIs to manage timeline entries for objects.",
      "name": "timeline-entries"
    },
    {
      "description": "Webhook event APIs.",
      "name": "webhooks"
    },
    {
      "description": "DevRev work interactions.",
      "name": "works"
    }
  ],
  "x-fern-version": {
    "default": "2022-10-20",
    "header": "X-DevRev-Version",
    "values": [
      "2022-10-20"
    ]
  }
}